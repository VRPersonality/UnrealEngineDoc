digraph "UE::Geometry::FDynamicMesh3::IsEdge"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="UE::Geometry::FDynamicMesh3\l::IsEdge",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="UE::Geometry::FDynamicMesh3\l::GetEdge",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d27/classUE_1_1Geometry_1_1FDynamicMesh3.html#a81f8dcb0a38b37b2bb83f903e2c07ffd",tooltip="Get the vertices and triangles of an edge, returned as [v0,v1,t0,t1], where t1 may be InvalidID."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="UE::MeshDeformation\l::ConstructCotangentLaplacian",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/df1/namespaceUE_1_1MeshDeformation.html#abb5ba9e1b374edf6d77271067c602718",tooltip="Construct a sparse matrix representation using a cotangent-weighted Laplacian."];
  Node2 -> Node4 [id="edge3_Node000002_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="UE::MeshDeformation\l::ConstructCotangentLaplacian",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/df1/namespaceUE_1_1MeshDeformation.html#aaf997123f9e9bc9c6853c6ba0330b986",tooltip="Construct a sparse matrix representation using a pre-multiplied cotangent-weighted Laplacian."];
  Node2 -> Node5 [id="edge4_Node000002_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="UE::MeshDeformation\l::ConstructMeanValueWeight\lLaplacian",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/df1/namespaceUE_1_1MeshDeformation.html#a8cfb166d2dee288b2c69e7a3942f1f16",tooltip="Construct a sparse matrix representation using a meanvalue-weighted Laplacian."];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="UE::Geometry::FDynamicMesh3\l::GetEdgeRef",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d27/classUE_1_1Geometry_1_1FDynamicMesh3.html#a3d69c150d6302bb49b6ee4d413c16892",tooltip="Get the vertices and triangles of an edge, returned as [v0,v1,t0,t1], where t1 may be InvalidID."];
  Node1 -> Node7 [id="edge6_Node000001_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="UE::Geometry::FDynamicMesh3\l::GetEdgeT",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d27/classUE_1_1Geometry_1_1FDynamicMesh3.html#a3647022d33138afab1ed4d867ea5c1d4",tooltip="Get the triangle pair for an edge."];
  Node7 -> Node8 [id="edge7_Node000007_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="UE::Geometry::FDynamicMesh3\l::EnumerateTriEdgeIDsFromEdgeID",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d27/classUE_1_1Geometry_1_1FDynamicMesh3.html#a1da731e8a46571f74b5f7d79eaf7ae6e",tooltip="Applies a given function to both TriEdgeIDs which a given EdgeID is associated with."];
  Node8 -> Node9 [id="edge8_Node000008_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="UE::Geometry::FDynamicMesh3\l::EnumerateTriEdgeIDsFromTriID",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d27/classUE_1_1Geometry_1_1FDynamicMesh3.html#afc0240d5c307a4ef335ec214aa173db2",tooltip="Applies a given function to both TriEdgeIDs which each EdgeID in a given Triangle is associated with."];
  Node1 -> Node10 [id="edge9_Node000001_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="UE::Geometry::FDynamicMesh3\l::GetEdgeV",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d27/classUE_1_1Geometry_1_1FDynamicMesh3.html#a6c182923dff8d79a03a2e2dcd807d4dc",tooltip="Get the vertex pair for an edge."];
  Node10 -> Node11 [id="edge10_Node000010_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="UE::Geometry::FSubRegion\lRemesher::AddEdgeToTriangleROI",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/d3f/classUE_1_1Geometry_1_1FSubRegionRemesher.html#aa5477e5667640d52491c554712b9be9e",tooltip=" "];
  Node11 -> Node12 [id="edge11_Node000011_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="UE::Geometry::FSubRegion\lRemesher::OnEdgeSplit",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/d3f/classUE_1_1Geometry_1_1FSubRegionRemesher.html#a17dcd8fed361ba585165d681a31a40f8",tooltip="Callback for subclasses to override to implement custom behavior."];
  Node10 -> Node13 [id="edge12_Node000010_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="UE::Geometry::FSubRegion\lRemesher::InitializeFromVertexROI",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/d3f/classUE_1_1Geometry_1_1FSubRegionRemesher.html#a552ffd6c80d00a008b9d0fdeb388d4be",tooltip="Initialize edge-subregion ROI from the VertexROI member that has been externally initialized."];
  Node10 -> Node14 [id="edge13_Node000010_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="UE::Geometry::FSubRegion\lRemesher::OnEdgeFlip",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/d3f/classUE_1_1Geometry_1_1FSubRegionRemesher.html#a7b93853a430af849258a65847712280d",tooltip="Callback for subclasses to override to implement custom behavior."];
  Node1 -> Node15 [id="edge14_Node000001_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="UE::Geometry::FDynamicMesh3\l::GetEdgeV",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d27/classUE_1_1Geometry_1_1FDynamicMesh3.html#ad3b242d387562d5446796575cbe3dec8",tooltip="Get the vertex positions of an edge."];
  Node1 -> Node16 [id="edge15_Node000001_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="UE::Geometry::FDynamicMesh3\l::GetTriEdgeIDFromEdgeID",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d27/classUE_1_1Geometry_1_1FDynamicMesh3.html#af0169acd7dfe7f66c9bced3548847756",tooltip="Return (triangle, edge_index) representation for given Edge ID."];
  Node16 -> Node8 [id="edge16_Node000016_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node17 [id="edge17_Node000001_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="UE::Geometry::FDynamicMesh3\l::IsBoundaryEdge",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d27/classUE_1_1Geometry_1_1FDynamicMesh3.html#a71d4b444d3c7266fb4a2c6ac3de8f690",tooltip="Returns true if edge is on the mesh boundary, ie only connected to one triangle."];
}
