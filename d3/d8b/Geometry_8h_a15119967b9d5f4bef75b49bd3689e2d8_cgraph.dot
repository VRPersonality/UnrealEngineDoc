digraph "USTRUCT"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="USTRUCT",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Represents the position, size, and absolute position of a Widget in Slate."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="UE::Slate::CastToVector2f",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/ddc/namespaceUE_1_1Slate.html#a99357342dfc5ea5c2a569f984b576661",tooltip="CastToVector2f allows supported types to be explicitly coerced to an FVector2f or const FVector2f& Th..."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="Concatenate",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d9f/TransformCalculus_8h.html#aec6e84d123a7c90e99211b6fdaa764d0",tooltip="Concatenates two transforms."];
  Node3 -> Node3 [id="edge3_Node000003_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node4 [id="edge4_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="TransformCast",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d9f/TransformCalculus_8h.html#af4bde4c3203f92ee59f604cb75f40c60",tooltip="Casts one TransformType to ResultType using rules laid out by TransformConverter<>::Convert<>()."];
  Node4 -> Node5 [id="edge5_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="TransformConverter\l::Convert",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/db0/structTransformConverter.html#abb146a681a035dec0731707b6b922c6e",tooltip="Efficient NULL conversion."];
  Node1 -> Node6 [id="edge6_Node000001_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="FSlateLayoutTransform\l::GetScale",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d88/classFSlateLayoutTransform.html#a0ef5a99d32ac8be0ad37d79c28bb8cc2",tooltip="Access to the scale."];
  Node1 -> Node7 [id="edge7_Node000001_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="FSlateLayoutTransform\l::GetTranslation",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d88/classFSlateLayoutTransform.html#a90dabd853a07a104b450b091a4829bb9",tooltip="Access to the 2D translation."];
  Node1 -> Node8 [id="edge8_Node000001_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="Inverse",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d9f/TransformCalculus_8h.html#a29156a093f8a383d33b1777e57754d23",tooltip="Inverts a transform from space A to space B so it transforms from space B to space A."];
  Node1 -> Node9 [id="edge9_Node000001_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="FSlateRotatedRect::\lIsUnderLocation",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/deb/structFSlateRotatedRect.html#a5f1aa25211993335cdeaf03c64e43c4b",tooltip="Point-in-rect test."];
  Node1 -> Node10 [id="edge10_Node000001_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="operator!=",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/d54/StateTreeTypes_8h.html#ac7c6317273de456bf941c2f0cfe357bd",tooltip=" "];
  Node1 -> Node11 [id="edge11_Node000001_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="operator=",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/d62/AnimNode__Inertialization_8h.html#a7d4766029836c503d7e211b4120796a1",tooltip=" "];
  Node1 -> Node12 [id="edge12_Node000001_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="operator==",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d98/EpicRtcVideoCommon_8h.html#a5b395fb6e30878f0ec1df7af2c2069af",tooltip=" "];
  Node1 -> Node13 [id="edge13_Node000001_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="ToString",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d8f/LogVerbosity_8h.html#abe3b25435b45e4cad83b33d44ab05d86",tooltip="Converts verbosity to a string."];
  Node1 -> Node4 [id="edge14_Node000001_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node14 [id="edge15_Node000001_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="TransformPoint",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d9f/TransformCalculus_8h.html#aa09af41c65b0384ba8b55522675551e1",tooltip="Generic implementation of TransformPoint."];
  Node1 -> Node15 [id="edge16_Node000001_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="TransformRect",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/df8/SlateRect_8h.html#a1d6ec4ca45a1f57dc1248fcc4c7ce491",tooltip="Transforms a rect by the given transform, ensuring the rect does not get inverted."];
  Node15 -> Node14 [id="edge17_Node000015_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node16 [id="edge18_Node000001_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="TransformVector",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d9f/TransformCalculus_8h.html#a667730e0e0989c4417a3d9523ebe7a7f",tooltip="Generic implementation of TransformVector."];
}
