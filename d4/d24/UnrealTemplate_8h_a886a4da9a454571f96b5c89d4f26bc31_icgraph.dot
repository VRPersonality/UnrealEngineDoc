digraph "IntCastChecked"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="IntCastChecked",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Cast and check that value fits in OutType."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="FBlackboard::FKey::FKey",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/d5e/structFBlackboard_1_1FKey.html#a68a062cc7b10a3c944619aa0f30a06b4",tooltip=" "];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="FTextureLayout::FTexture\lLayout",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d51/classFTextureLayout.html#ad2b9cb4b3d2fe0876647f8d14f3da789",tooltip="Minimal initialization constructor."];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="FTextureLayout3d::FTexture\lLayout3d",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/de8/classFTextureLayout3d.html#a09a9e13ca4bc2ab2c388ab5b0182808d",tooltip="Minimal initialization constructor."];
  Node1 -> Node5 [id="edge4_Node000001_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="UE::Math::TIntPoint\l\< IntType \>::TIntPoint",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d65/structUE_1_1Math_1_1TIntPoint.html#a62ae63bc5716a1ed4639fda223236b80",tooltip=" "];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="UE::Math::TIntVector2\l\< int32 \>::TIntVector2",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d01/structUE_1_1Math_1_1TIntVector2.html#afae603d121f1652c73eb2969b4d1b418",tooltip=" "];
  Node1 -> Node7 [id="edge6_Node000001_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="UE::Math::TIntVector3\l::TIntVector3",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d7/de1/structUE_1_1Math_1_1TIntVector3.html#ae7b9624b78e9877e9882ff7745980112",tooltip="Constructor."];
  Node1 -> Node8 [id="edge7_Node000001_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="UE::Math::TIntVector3\l\< int32 \>::TIntVector3",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d7/de1/structUE_1_1Math_1_1TIntVector3.html#aa82162012908cb8854ce43d4092118a5",tooltip=" "];
  Node1 -> Node9 [id="edge8_Node000001_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="UE::Math::TIntVector4\l\< int32 \>::TIntVector4",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d51/structUE_1_1Math_1_1TIntVector4.html#ac2fbe7fed6b82867bb916fe585ad41dc",tooltip=" "];
  Node1 -> Node10 [id="edge9_Node000001_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="TStringView\< TCHAR\l \>::TStringView",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/dbe/classTStringView.html#a2017925cae64947b62d8c508e3be3cba",tooltip=" "];
  Node1 -> Node11 [id="edge10_Node000001_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="FTextureLayout3d::AddSurface\lInner",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/de8/classFTextureLayout3d.html#a42d351e3c81839d7b0c2744ac9245abe",tooltip="Recursively traverses the tree depth first and searches for a large enough leaf node to contain the r..."];
  Node11 -> Node12 [id="edge11_Node000011_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="FTextureLayout3d::AddElement",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/de8/classFTextureLayout3d.html#ae2c438c163dd7f07c642a8663fbfb363",tooltip="Finds a free area in the texture large enough to contain a surface with the given size."];
  Node11 -> Node11 [id="edge12_Node000011_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node13 [id="edge13_Node000001_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="FTextureLayout::AddSurface\lInner",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d51/classFTextureLayout.html#a7a002b1b894ed2f2a78402aa97cc3ebc",tooltip="Recursively traverses the tree depth first and searches for a large enough leaf node to contain the r..."];
  Node13 -> Node14 [id="edge14_Node000013_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="FTextureLayout::AddElement",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d51/classFTextureLayout.html#a334c3aac9561fb3860888a9ed416745b",tooltip="Finds a free area in the texture large enough to contain a surface with the given size."];
  Node13 -> Node13 [id="edge15_Node000013_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node15 [id="edge16_Node000001_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="FMaterialResourceMemoryWriter\l::BeginSerializingMaterialResource",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d9/d64/classFMaterialResourceMemoryWriter.html#ae2b5611cc6dc61997736104ab762a003",tooltip=" "];
  Node1 -> Node16 [id="edge17_Node000001_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="TSimpleCellGrid::GetAllocatedSize",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/dcb/structTSimpleCellGrid.html#acfb8ecc2aa531a4275510793e6edfe19",tooltip=" "];
  Node16 -> Node17 [id="edge18_Node000016_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="TSimpleCellGrid::Serialize",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/dcb/structTSimpleCellGrid.html#a40d730b658f3e3a09d852f256d3f54fc",tooltip=" "];
  Node1 -> Node18 [id="edge19_Node000001_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="TSimpleCellGrid::GetCell\lCoordsUnsafe",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/dcb/structTSimpleCellGrid.html#acd1fc04906bda98d6ab3cf9e30d9a0b6",tooltip="Convert world location to (X,Y) coords on grid, result can be outside grid."];
  Node18 -> Node19 [id="edge20_Node000018_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="TSimpleCellGrid::GetCell\lCoords",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/dcb/structTSimpleCellGrid.html#a4ff6d70d023967d10f732ac55957a00e",tooltip="Convert world location to (X,Y) coords on grid, result is clamped to grid."];
  Node18 -> Node20 [id="edge21_Node000018_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="TSimpleCellGrid::GetCell\lIndex",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/dcb/structTSimpleCellGrid.html#a144edcb004e46cb85e3da2e494dc8057",tooltip="Convert world location to cell index, returns -1 for position outside grid."];
  Node18 -> Node21 [id="edge22_Node000018_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="TSimpleCellGrid::GetCell\lIndexUnsafe",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/dcb/structTSimpleCellGrid.html#aa481261fbf8e614f86e0300589a6cd76",tooltip="Convert world location to cell index, result can be invalid."];
  Node21 -> Node22 [id="edge23_Node000021_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="TSimpleCellGrid::GetCell\lAtCoordsUnsafe",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/dcb/structTSimpleCellGrid.html#a5e09f9d60048b5d82e36388a1d45fb08",tooltip=" "];
  Node21 -> Node23 [id="edge24_Node000021_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="TSimpleCellGrid::GetCell\lAtCoordsUnsafe",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/dcb/structTSimpleCellGrid.html#a8906f011199d0e10dbbc20e67408d174",tooltip=" "];
  Node21 -> Node24 [id="edge25_Node000021_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="TSimpleCellGrid::GetCell\lAtWorldLocationUnsafe",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/dcb/structTSimpleCellGrid.html#a62cd7a3805193267cce52c0c3346a125",tooltip=" "];
  Node21 -> Node25 [id="edge26_Node000021_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="TSimpleCellGrid::GetCell\lIndex",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/dcb/structTSimpleCellGrid.html#abc04d8fb66b4bfdba281b787b2c1fade",tooltip="Convert (X,Y) coords on grid to cell index, returns -1 for position outside grid."];
  Node25 -> Node26 [id="edge27_Node000025_Node000026",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="TSimpleCellGrid::GetCell\lAtWorldLocation",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/dcb/structTSimpleCellGrid.html#ada441783c37e1fdac90a512a1f5b4632",tooltip=" "];
  Node25 -> Node20 [id="edge28_Node000025_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node21 -> Node27 [id="edge29_Node000021_Node000027",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="TSimpleCellGrid::GetCell\lIndexUnsafe",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/dcb/structTSimpleCellGrid.html#acd895d28c15ef88bbbc4609d5d9b4d5c",tooltip="Convert (X,Y) coords on grid to cell index, result can be invalid."];
  Node21 -> Node21 [id="edge30_Node000021_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node28 [id="edge31_Node000018_Node000028",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="TSimpleCellGrid::GetCell\lRectangleFromBox",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/dcb/structTSimpleCellGrid.html#a3062195ceff706edf83123860edabd98",tooltip="Compute a rectangle of cells overlapping the given WorldBox."];
  Node1 -> Node29 [id="edge32_Node000001_Node000029",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="TDefaultNumericTypeInterface\l::GetMaxFractionalDigits",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/df1/structTDefaultNumericTypeInterface.html#a8f3af5d5ed725ec1aa60d21f2fa6809d",tooltip=" "];
  Node1 -> Node30 [id="edge33_Node000001_Node000030",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="TDefaultNumericTypeInterface\l::GetMinFractionalDigits",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/df1/structTDefaultNumericTypeInterface.html#a7fc3a20b17c7899a93748d47983bc921",tooltip="Gets the minimum and maximum fractional digits."];
  Node1 -> Node31 [id="edge34_Node000001_Node000031",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="TSimpleCellGrid::Init",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/dcb/structTSimpleCellGrid.html#abe652671c782e592d7ef0fc4ba0df58e",tooltip="Initialize the grid from a bounding box."];
  Node1 -> Node32 [id="edge35_Node000001_Node000032",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="UE::Math::TIntRect\l\< int32 \>::Scale",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/dbf/structUE_1_1Math_1_1TIntRect.html#ab4e79bbd5ed6257b2774e91c0a2ec421",tooltip=" "];
  Node32 -> Node33 [id="edge36_Node000032_Node000033",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="UE::Math::TIntRect\l\< int32 \>::operator*",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/dbf/structUE_1_1Math_1_1TIntRect.html#aaf57320cd80f2e1c6d2466d2cbd442c9",tooltip=" "];
  Node32 -> Node34 [id="edge37_Node000032_Node000034",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node34 [id="Node000034",label="UE::Math::TIntRect\l\< int32 \>::operator*=",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/dbf/structUE_1_1Math_1_1TIntRect.html#a59016f7a48ed67a0729839ba9383a334",tooltip=" "];
  Node1 -> Node35 [id="edge38_Node000001_Node000035",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="UE::FPlatformIoDispatcher\lBase::ScatterGather",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$df/de7/classUE_1_1FPlatformIoDispatcherBase.html#af6a25dc44b0e785012e30644f3fc4c5c",tooltip="Issue a scatter-gather request."];
  Node1 -> Node36 [id="edge39_Node000001_Node000036",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="FObjectReader::Serialize",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$df/de4/classFObjectReader.html#ac475a75d1dcb1f6df03e74fcaaffaf95",tooltip=" "];
  Node1 -> Node37 [id="edge40_Node000001_Node000037",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="FTransactionallySafeArchive\lWriter::Serialize",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/dd1/classFTransactionallySafeArchiveWriter.html#a49525137390bc54f31f6b6d65e45b470",tooltip=" "];
  Node1 -> Node38 [id="edge41_Node000001_Node000038",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node38 [id="Node000038",label="UE::Geometry::TDynamicVertex\lSkinWeightsAttribute\< FDynamicMesh3\l \>::Serialize",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/d3e/classUE_1_1Geometry_1_1TDynamicVertexSkinWeightsAttribute.html#a192735913fc8e3ff0d7aabdb545f7fd4",tooltip=" "];
  Node1 -> Node39 [id="edge42_Node000001_Node000039",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node39 [id="Node000039",label="TDefaultNumericTypeInterface\l::SetMaxFractionalDigits",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/df1/structTDefaultNumericTypeInterface.html#a4336e4be51c5e73578485c5229d0b2fc",tooltip=" "];
  Node1 -> Node40 [id="edge43_Node000001_Node000040",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node40 [id="Node000040",label="TDefaultNumericTypeInterface\l::SetMinFractionalDigits",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/df1/structTDefaultNumericTypeInterface.html#a1656733c818e14bc9ff64c69ffdc5682",tooltip="Sets the minimum and maximum fractional digits - A minimum greater than 0 will always have that many ..."];
  Node1 -> Node41 [id="edge44_Node000001_Node000041",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node41 [id="Node000041",label="USTRUCT",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d7c/BehaviorTreeTypes_8h.html#a824369abf6fe4bb006defe35bc5515e0",tooltip="helper struct for defining types of allowed blackboard entries (e.g."];
}
