digraph "TArray::Reset"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="TArray::Reset",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Same as empty, but doesn't change memory allocations, unless the new size is larger than the current ..."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="TComponentInterfaceIterator\l::TComponentInterfaceIterator",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/d95/classTComponentInterfaceIterator.html#a35b2b9bc37bc8e0a6e5f8c254d0f85e7",tooltip=" "];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="TComponentInterfaceIterator\l::TComponentInterfaceIterator",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/d95/classTComponentInterfaceIterator.html#a00786f67e24847df1d0c009d319e4da8",tooltip=" "];
  Node2 -> Node4 [id="edge3_Node000002_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="TComponentInterfaceIterator\l::operator!=",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/d95/classTComponentInterfaceIterator.html#a96f6ff41ace38bf81fde801d250e18af",tooltip=" "];
  Node2 -> Node5 [id="edge4_Node000002_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="TComponentInterfaceIterator\l::operator==",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/d95/classTComponentInterfaceIterator.html#af1f2de91080f9a1dd2f7bb251093d9a8",tooltip=" "];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="TFindObjectReferencers\l::TFindObjectReferencers",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d9e/classTFindObjectReferencers.html#ad975031807ee2ec999a9b1233313a730",tooltip="Default constructor."];
  Node1 -> Node7 [id="edge6_Node000001_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="UE::Geometry::CurveUtil\l::ClipConvexToBounds",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d7/dd2/namespaceUE_1_1Geometry_1_1CurveUtil.html#ab95013c4572c629b52a53a921a5dc120",tooltip="Use the Sutherland–Hodgman algorithm to clip the vertices to the given bounds Note if the path/polygo..."];
  Node7 -> Node8 [id="edge7_Node000007_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="UE::Geometry::TPolygon2\l\< double \>::ClipConvex",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/df8/classUE_1_1Geometry_1_1TPolygon2.html#a8f14fc0c918d69c0db0f5a214c4e1962",tooltip=" "];
  Node1 -> Node9 [id="edge8_Node000001_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="UE::Geometry::CurveUtil\l::ClipConvexToPlane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d7/dd2/namespaceUE_1_1Geometry_1_1CurveUtil.html#a210e402520184d89fc7b7720f4bbd418",tooltip="Use the Sutherland–Hodgman algorithm to clip the vertices to the given plane Note if the path/polygon..."];
  Node1 -> Node10 [id="edge9_Node000001_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="UE::Geometry::FSizedDisjoint\lSet::CompactedGroupIndexToGroupID",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d44/structUE_1_1Geometry_1_1FSizedDisjointSet.html#aa4e6194b9ce39aaeb17d1aeb5bbd64d5",tooltip="Create mappings between compacted Group Index and group ID, where the compacted indices numbers the g..."];
  Node1 -> Node11 [id="edge10_Node000001_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="UE::Geometry::FClusterKMeans\l::ComputeClusters",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d7/dc1/structUE_1_1Geometry_1_1FClusterKMeans.html#abb849bcf81cc079171aba43a29f63da4",tooltip="Compute the K-Means clustering of FVector points."];
  Node1 -> Node12 [id="edge11_Node000001_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="ConvexHull2D::ComputeConvex\lHullLegacy",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/db6/namespaceConvexHull2D.html#a86db4a642e78ef1d7283348110d54e5a",tooltip="Calculates convex hull on xy-plane of points on 'Points' and stores the indices of the resulting hull..."];
  Node1 -> Node13 [id="edge12_Node000001_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="TextureLayoutTools\l::ComputeDifferenceArray",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d6c/namespaceTextureLayoutTools.html#a346c4cca85c73c65f4e98efc2436b6c4",tooltip="Computes the difference between two value arrays (templated)"];
  Node1 -> Node14 [id="edge13_Node000001_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="UE::Geometry::FMeshEdgeSelection\l::ContractByBorderEdges",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/de0/classUE_1_1Geometry_1_1FMeshEdgeSelection.html#aee85a10b219d661a1f968f68252598a4",tooltip="For each contraction, remove edges in current selection set that have any unselected edge neighboring..."];
  Node1 -> Node15 [id="edge14_Node000001_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="UE::Geometry::FMeshVertex\lSelection::ContractByBorderVertices",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dbe/classUE_1_1Geometry_1_1FMeshVertexSelection.html#ac1b9452f3144a20afe78b12928638308",tooltip="Remove all vertices in current selection set that have at least one neighbour vertex that is not sele..."];
  Node1 -> Node16 [id="edge15_Node000001_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="UE::Graph::ConvertToGraph",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/d33/namespaceUE_1_1Graph.html#aa5c899f112dccf29af8f5200170f4661",tooltip="Convert an array of Keys and a function that returns the directed edges from each Key into the Normal..."];
  Node1 -> Node17 [id="edge16_Node000001_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="UE::Graph::ConvertToSingle\lBufferGraph",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/d33/namespaceUE_1_1Graph.html#a0c4b13297a2a105503251c7823db9b1b",tooltip="Convert an array of separately allocated edge ranges into a single buffer shared by all vertices and ..."];
  Node17 -> Node18 [id="edge17_Node000017_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="UE::Graph::ConvertToSingle\lBufferGraph",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/d33/namespaceUE_1_1Graph.html#af04cbc9cc91d5586d63f409047700e4d",tooltip="Convert an array of separately allocated edge ranges into a single buffer shared by all vertices and ..."];
  Node1 -> Node19 [id="edge18_Node000001_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="FTransactionallySafeArchive\lWriter::DoDeferredWrites",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/dd1/classFTransactionallySafeArchiveWriter.html#a73b91557d4e99cb500c2219946c4e102",tooltip=" "];
  Node19 -> Node20 [id="edge19_Node000019_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="FTransactionallySafeArchive\lWriter::~FTransactionallySafeArchive\lWriter",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/dd1/classFTransactionallySafeArchiveWriter.html#a496805d06aad0aebbc7ec081fe2df540",tooltip=" "];
  Node19 -> Node21 [id="edge20_Node000019_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="FTransactionallySafeArchive\lWriter::RegisterCommitHandler",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/dd1/classFTransactionallySafeArchiveWriter.html#abc23b51aeafa7c84ee700ba321e30c80",tooltip=" "];
  Node21 -> Node22 [id="edge21_Node000021_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="FTransactionallySafeArchive\lWriter::MaybeRegisterCommitHandler",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/dd1/classFTransactionallySafeArchiveWriter.html#ac32eddf170c3a1572b49490cb25130df",tooltip=" "];
  Node22 -> Node23 [id="edge22_Node000022_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="FTransactionallySafeArchive\lWriter::Flush",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/dd1/classFTransactionallySafeArchiveWriter.html#a54d94599bab81d60f37816b29c858367",tooltip="Like all writes, flushes also need to be deferred to commit time."];
  Node22 -> Node24 [id="edge23_Node000022_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="FTransactionallySafeArchive\lWriter::Serialize",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/dd1/classFTransactionallySafeArchiveWriter.html#a49525137390bc54f31f6b6d65e45b470",tooltip=" "];
  Node1 -> Node25 [id="edge24_Node000001_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="UE::Geometry::FMeshEdgeSelection\l::ExpandToOneRingNeighbors_Helper",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/de0/classUE_1_1Geometry_1_1FMeshEdgeSelection.html#ac95172af48defefdc53ba1301cba0b14",tooltip=" "];
  Node25 -> Node26 [id="edge25_Node000025_Node000026",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="UE::Geometry::FMeshEdgeSelection\l::ExpandToOneRingNeighbors",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/de0/classUE_1_1Geometry_1_1FMeshEdgeSelection.html#a3a66b6df1ddc0c7832ede6b28f13314b",tooltip=" "];
  Node25 -> Node27 [id="edge26_Node000025_Node000027",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="UE::Geometry::FMeshEdgeSelection\l::ExpandToOneRingNeighbors",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/de0/classUE_1_1Geometry_1_1FMeshEdgeSelection.html#ab05c977814687fdd4989532f654a159e",tooltip=" "];
  Node25 -> Node28 [id="edge27_Node000025_Node000028",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="UE::Geometry::FMeshEdgeSelection\l::ExpandToOneRingNeighbors",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/de0/classUE_1_1Geometry_1_1FMeshEdgeSelection.html#afbec3e827ecd348564e8e29979b186f1",tooltip=" "];
  Node25 -> Node29 [id="edge28_Node000025_Node000029",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="UE::Geometry::FMeshEdgeSelection\l::ExpandToOneRingNeighbors",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/de0/classUE_1_1Geometry_1_1FMeshEdgeSelection.html#ab422eb6a917d6c679977c62dfd25b618",tooltip="Add all one-ring neighbors of current selection to set."];
  Node1 -> Node30 [id="edge29_Node000001_Node000030",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="UE::Anim::FCurveUtils\l::Filter",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d7/d7e/structUE_1_1Anim_1_1FCurveUtils.html#a95cda69f2c3df0267c2c0141dc064f39",tooltip="Remove any curves in InOutCurve that are filtered by InFilter."];
  Node1 -> Node31 [id="edge30_Node000001_Node000031",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="AlgoImpl::FindMostIndependent\lMutuallyReachableVertexSet",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d64/namespaceAlgoImpl.html#af38ce7f2d6efaf327a9c7223fdc54bbd",tooltip="Called when there is a MutuallyReachableVertexSet (aka no vertices are independent)."];
  Node31 -> Node32 [id="edge31_Node000031_Node000032",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="Algo::KahnTopologicalSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d33/namespaceAlgo.html#a231003554c827f132ff7e767bf161b4d",tooltip="Public entrypoint."];
  Node32 -> Node33 [id="edge32_Node000032_Node000033",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="Algo::TopologicalSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d33/namespaceAlgo.html#a019f59012ba87e9c255a73934d81f33b",tooltip="Sorts the given range in leaf to root order: For every pair of elements (A,B) where SortedIndex(A) < ..."];
  Node1 -> Node34 [id="edge33_Node000001_Node000034",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node34 [id="Node000034",label="UE::Geometry::TIncremental\lMeshDijkstra::FindPathToNearestSeed",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$df/d7b/classUE_1_1Geometry_1_1TIncrementalMeshDijkstra.html#a5bf0924a3e63d85a5f6d85f56d828afc",tooltip="Find path from a point to the nearest seed point."];
  Node1 -> Node35 [id="edge34_Node000001_Node000035",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="UE::Geometry::TMeshDijkstra\l::FindPathToNearestSeed",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/d1d/classUE_1_1Geometry_1_1TMeshDijkstra.html#a72c9dce4b4f729ea6d236f6a18ac1c17",tooltip="Find path from a point to the nearest seed point."];
  Node1 -> Node36 [id="edge35_Node000001_Node000036",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="FLayoutExtender::FindStack\lExtensions",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/daf/classFLayoutExtender.html#a1046231324a8df6f61e0ef53aa52b7e9",tooltip="Populate the specified container with the tabs that relate to the specified stack."];
  Node1 -> Node37 [id="edge36_Node000001_Node000037",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="FLayoutExtender::FindTab\lExtensions",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/daf/classFLayoutExtender.html#af08cf38877830632fb8b1655209a2723",tooltip="Populate the specified container with the tabs that relate to the specified tab ID."];
  Node1 -> Node38 [id="edge37_Node000001_Node000038",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node38 [id="Node000038",label="FSoundWaveLoadingBehavior\lUtil::GetChainOfClassesForLoading\lBehaviorInheritance",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/d78/classFSoundWaveLoadingBehaviorUtil.html#afca6c430e88903acbbff37497f7033f1",tooltip=" "];
  Node38 -> Node39 [id="edge38_Node000038_Node000039",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node39 [id="Node000039",label="UE::SoundWaveLoadingUtil\l::Private::RecordSoundWaveLoading\lBehaviorDependenciesForCook",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/da2/namespaceUE_1_1SoundWaveLoadingUtil_1_1Private.html#ae752a0d35e2f98daa5e5a04d289548ba",tooltip=" "];
  Node1 -> Node40 [id="edge39_Node000001_Node000040",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node40 [id="Node000040",label="FMeshDescription::GetEdge\lConnectedPolygons",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#a1d5df99bbc670f2d5cf3b516c5be878f",tooltip="Populates the passed array with polygon IDs connected to this edge."];
  Node40 -> Node41 [id="edge40_Node000040_Node000041",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node41 [id="Node000041",label="FMeshDescription::GetEdge\lConnectedPolygons",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#a25b7d06af334e0c0f5143c9fd4757d7e",tooltip="Returns the polygons connected to this edge as an array with the specified allocator template type."];
  Node40 -> Node42 [id="edge41_Node000040_Node000042",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node42 [id="Node000042",label="FMeshDescription::GetNum\lEdgeConnectedPolygons",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#a25252f9da020b66225e54031fd3c1f9c",tooltip="Returns the number of polygons connected to this edge."];
  Node40 -> Node43 [id="edge42_Node000040_Node000043",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node43 [id="Node000043",label="FMeshDescription::GetPolygon\lAdjacentPolygons",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#a8b69dedb041c81e0414d5856d6113224",tooltip="Populates the passed array with adjacent polygons."];
  Node43 -> Node44 [id="edge43_Node000043_Node000044",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node44 [id="Node000044",label="FMeshDescription::GetPolygon\lAdjacentPolygons",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#af8391ae692103c788daf140691b1ff25",tooltip="Return adjacent polygons into a TArray with the specified allocator."];
  Node1 -> Node45 [id="edge44_Node000001_Node000045",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node45 [id="Node000045",label="TMapBase::GetKeys",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dad/classTMapBase.html#aa255faa70da5216a492c0a59f1293d79",tooltip="Get the unique keys contained within this map."];
  Node45 -> Node46 [id="edge45_Node000045_Node000046",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node46 [id="Node000046",label="FConfigFile::GetKeys",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d8b/classFConfigFile.html#addd33012e38316cfc33dbc2b262758f8",tooltip=" "];
  Node45 -> Node47 [id="edge46_Node000045_Node000047",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node47 [id="Node000047",label="FConfigFile::GetKeys",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d8b/classFConfigFile.html#a6c5812068fc7d705b878ab4c20d0f374",tooltip=" "];
  Node1 -> Node48 [id="edge47_Node000001_Node000048",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node48 [id="Node000048",label="TStripedMapBase\< BucketCount,\l TMap\< KeyType, ValueType,\l SetAllocator, KeyFuncs \>,\l KeyType, ValueType, SetAllocator,\l KeyFuncs, LockingPolicy \>::GetKeys",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/df4/classTStripedMapBase.html#aa9beafb9c4bed5c372a517f9ad1b57df",tooltip=" "];
  Node1 -> Node43 [id="edge48_Node000001_Node000043",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node49 [id="edge49_Node000001_Node000049",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node49 [id="Node000049",label="FMeshDescription::GetPolygon\lInternalEdges",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#ab09c0ab70b3658659bf8a95eadfc4e91",tooltip="Populate the provided array with a list of edges which are internal to the polygon,..."];
  Node49 -> Node50 [id="edge50_Node000049_Node000050",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node50 [id="Node000050",label="FMeshDescription::GetPolygon\lInternalEdges",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#aee03a54270ded29ed22eddb9c8049358",tooltip="Return the internal edges of this polygon, i.e."];
  Node1 -> Node51 [id="edge51_Node000001_Node000051",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node51 [id="Node000051",label="FRigVMGraphEnumDetailCustomization\l::GetPropertyChain",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d11/classFRigVMGraphEnumDetailCustomization.html#a90a3feaa998abfb7941f0b778cdd822b",tooltip=" "];
  Node1 -> Node52 [id="edge52_Node000001_Node000052",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node52 [id="Node000052",label="FRigVMGraphMathTypeDetail\lCustomization::GetPropertyChain",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d20/classFRigVMGraphMathTypeDetailCustomization.html#a31baf97a6cae859a0e846c806d29784a",tooltip=" "];
  Node52 -> Node53 [id="edge53_Node000052_Node000053",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node53 [id="Node000053",label="FRigVMGraphMathTypeDetail\lCustomization::GetRotation",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d20/classFRigVMGraphMathTypeDetailCustomization.html#a8d6c8102cdcd8b27f7ca3eff94cadc77",tooltip=" "];
  Node53 -> Node54 [id="edge54_Node000053_Node000054",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node54 [id="Node000054",label="FRigVMGraphMathTypeDetail\lCustomization::ExtendRotationArgs",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d20/classFRigVMGraphMathTypeDetailCustomization.html#acd8e92e35b2f1d37d5bfd2e7305e8876",tooltip=" "];
  Node52 -> Node55 [id="edge55_Node000052_Node000055",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node55 [id="Node000055",label="FRigVMGraphMathTypeDetail\lCustomization::GetVectorComponent",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d20/classFRigVMGraphMathTypeDetailCustomization.html#a0793d49f6504c2e64f199fc47247c61d",tooltip=" "];
  Node55 -> Node56 [id="edge56_Node000055_Node000056",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node56 [id="Node000056",label="FRigVMGraphMathTypeDetail\lCustomization::ExtendVectorArgs",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d20/classFRigVMGraphMathTypeDetailCustomization.html#ac22957a3dba75dce3a6b8c4c5a8affe0",tooltip=" "];
  Node52 -> Node57 [id="edge57_Node000052_Node000057",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node57 [id="Node000057",label="FRigVMGraphMathTypeDetail\lCustomization::OnRotationChanged",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d20/classFRigVMGraphMathTypeDetailCustomization.html#a00c08f4bea03cffea65b6126d405fc9c",tooltip=" "];
  Node57 -> Node54 [id="edge58_Node000057_Node000054",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node58 [id="edge59_Node000001_Node000058",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node58 [id="Node000058",label="FMeshDescription::GetTriangle\lAdjacentTriangles",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#abbae40b7dc81e1f46e9ae88761f5701e",tooltip="Populates the passed array with adjacent triangles."];
  Node58 -> Node59 [id="edge60_Node000058_Node000059",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node59 [id="Node000059",label="FMeshDescription::GetTriangle\lAdjacentTriangles",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#a0b22c4b546106c81a01772851c6ef768",tooltip="Return adjacent triangles into a TArray with the specified allocator."];
  Node1 -> Node60 [id="edge61_Node000001_Node000060",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node60 [id="Node000060",label="UE::Geometry::FClusterKMeans\l::GetUniformSpacedInitialCenters",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d7/dc1/structUE_1_1Geometry_1_1FClusterKMeans.html#a69faa9e9c5b4e229f8a278834472c492",tooltip="Helper function to generate (approximately) uniform-spaced initial clusters centers,..."];
  Node1 -> Node61 [id="edge62_Node000001_Node000061",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node61 [id="Node000061",label="FMeshDescription::GetVertex\lConnectedPolygons",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#a3fe4215e4e8cadc2bdb97e263a66b3fb",tooltip="Populates the passed array of PolygonIDs with the polygons connected to this vertex."];
  Node61 -> Node62 [id="edge63_Node000061_Node000062",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node62 [id="Node000062",label="FMeshDescription::GetNum\lVertexConnectedPolygons",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#a55047871ddf10db457c3c4e877f5a6e2",tooltip="Returns the number of polygons connected to this vertex."];
  Node61 -> Node63 [id="edge64_Node000061_Node000063",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node63 [id="Node000063",label="FMeshDescription::GetVertex\lConnectedPolygons",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#adbabdf8645360121e2f4f6540b029ae1",tooltip="Returns the polygons connected to this vertex as an array with the specified allocator template type."];
  Node1 -> Node64 [id="edge65_Node000001_Node000064",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node64 [id="Node000064",label="FMeshDescription::GetVertex\lConnectedTriangles",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#a39b84f9791c7457a5975c81316a27411",tooltip="Populates the passed array of TriangleIDs with the triangles connected to this vertex."];
  Node64 -> Node65 [id="edge66_Node000064_Node000065",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node65 [id="Node000065",label="FMeshDescription::GetVertex\lConnectedTriangles",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#aeb4c40a56fb6161dd3eb3a1a83acf1fe",tooltip="Returns the triangles connected to this vertex as an array with the specified allocator template type..."];
  Node1 -> Node66 [id="edge67_Node000001_Node000066",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node66 [id="Node000066",label="FMeshDescription::GetVertex\lInstanceConnectedPolygons",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#af49f2ba7e8ce7322b97ff0496b48c73a",tooltip="Populates the passed array with the polygons connected to this vertex instance."];
  Node66 -> Node67 [id="edge68_Node000066_Node000067",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node67 [id="Node000067",label="FMeshDescription::GetNum\lVertexInstanceConnectedPolygons",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#abca14120ba05ee003e0455d23263a047",tooltip="Returns the number of polygons connected to this vertex instance."];
  Node66 -> Node68 [id="edge69_Node000066_Node000068",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node68 [id="Node000068",label="FMeshDescription::GetVertex\lInstanceConnectedPolygons",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#a6933e6580c603f9bf872bf03c999d161",tooltip="Returns the polygons connected to this vertex instance as an array with the specified allocator templ..."];
  Node1 -> Node69 [id="edge70_Node000001_Node000069",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node69 [id="Node000069",label="LoadFromCompactBinary",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/da9/CompactBinarySerialization_8h.html#a796115c358319cf4665e5a60f4e240de",tooltip=" "];
  Node1 -> Node70 [id="edge71_Node000001_Node000070",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node70 [id="Node000070",label="UE::Geometry::TMeshWinding\lNumberGrid::make_grid",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/d62/classUE_1_1Geometry_1_1TMeshWindingNumberGrid.html#a2517cca7e2cd2c5bbc330f3e7b9ef435",tooltip=" "];
  Node70 -> Node71 [id="edge72_Node000070_Node000071",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node71 [id="Node000071",label="UE::Geometry::TMeshWinding\lNumberGrid::Compute",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/d62/classUE_1_1Geometry_1_1TMeshWindingNumberGrid.html#add8b176d6de81c5b78e2968b33244a32",tooltip=" "];
  Node71 -> Node72 [id="edge73_Node000071_Node000072",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node72 [id="Node000072",label="UE::Geometry::FOccupancy\lGrid3::FOccupancyGrid3",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d7/df2/structUE_1_1Geometry_1_1FOccupancyGrid3.html#a4aad7be746f02e77f485d8e53d06f6ad",tooltip=" "];
  Node1 -> Node73 [id="edge74_Node000001_Node000073",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node73 [id="Node000073",label="UE::Geometry::TSweepingMesh\lSDF::make_level_set3_parallel\l_floodfill",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/d4d/classUE_1_1Geometry_1_1TSweepingMeshSDF.html#a6006acc02ec4f581e4df72364150efe8",tooltip=" "];
  Node73 -> Node74 [id="edge75_Node000073_Node000074",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node74 [id="Node000074",label="UE::Geometry::TSweepingMesh\lSDF::Compute",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/d4d/classUE_1_1Geometry_1_1TSweepingMeshSDF.html#aeb546e96e9507e8391ea290f13d7b033",tooltip="Compute the SDF with exactly specified grid origin and dimensions."];
  Node1 -> Node75 [id="edge76_Node000001_Node000075",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node75 [id="Node000075",label="MovieSceneToolHelpers\l::MergeChannels",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d9/d4a/classMovieSceneToolHelpers.html#abb9a9db481ed946b92f866ce8117334b",tooltip=" "];
  Node75 -> Node76 [id="edge77_Node000075_Node000076",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node76 [id="Node000076",label="MovieSceneToolHelpers\l::MergeSections",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d9/d4a/classMovieSceneToolHelpers.html#ad7ecfef9df3c493db807aa99ef0e25bf",tooltip=" "];
  Node75 -> Node77 [id="edge78_Node000075_Node000077",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node77 [id="Node000077",label="MovieSceneToolHelpers\l::MergeSections",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d9/d4a/classMovieSceneToolHelpers.html#aa200fc537b8bcee724958fbd703f0176",tooltip=" "];
  Node1 -> Node78 [id="edge79_Node000001_Node000078",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node78 [id="Node000078",label="ParallelForWithPreWorkWith\lTaskContext",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/da1/ParallelFor_8h.html#aa39e7f77b03d5baa26335d7cdf4a1458",tooltip="General purpose parallel for that uses the taskgraph."];
  Node1 -> Node79 [id="edge80_Node000001_Node000079",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node79 [id="Node000079",label="ParallelForWithPreWorkWith\lTaskContext",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/da1/ParallelFor_8h.html#a20a62c4f7f05d2da6ffe59cc0ce3ae3d",tooltip="General purpose parallel for that uses the taskgraph."];
  Node1 -> Node80 [id="edge81_Node000001_Node000080",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node80 [id="Node000080",label="ParallelForWithTaskContext",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/da1/ParallelFor_8h.html#afb13995d3ac01e23a7064246baed39f9",tooltip="General purpose parallel for that uses the taskgraph."];
  Node80 -> Node81 [id="edge82_Node000080_Node000081",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node81 [id="Node000081",label="ParallelForWithTaskContext",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/da1/ParallelFor_8h.html#a0755a7843a676438cd1756b43c451ecf",tooltip="General purpose parallel for that uses the taskgraph."];
  Node1 -> Node82 [id="edge83_Node000001_Node000082",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node82 [id="Node000082",label="ParallelForWithTaskContext",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/da1/ParallelFor_8h.html#a09e3d3ddb9fd196f2679b5daa4bd3b10",tooltip="General purpose parallel for that uses the taskgraph."];
  Node1 -> Node83 [id="edge84_Node000001_Node000083",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node83 [id="Node000083",label="ParallelForWithTaskContext",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/da1/ParallelFor_8h.html#a2661696839d63b5491262c8057d4efcd",tooltip="General purpose parallel for that uses the taskgraph."];
  Node1 -> Node84 [id="edge85_Node000001_Node000084",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node84 [id="Node000084",label="ParallelForWithTaskContext",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/da1/ParallelFor_8h.html#a633f26879d4e7f2b3051e61a62f2eff9",tooltip="General purpose parallel for that uses the taskgraph."];
  Node1 -> Node85 [id="edge86_Node000001_Node000085",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node85 [id="Node000085",label="UE::Geometry::FSparseDynamic\lPointOctree3::ParallelRangeQuery",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/dcf/classUE_1_1Geometry_1_1FSparseDynamicPointOctree3.html#ae1432baa21f90d32760776f17945a9cb",tooltip="Collect PointIDs from all the cells with bounding boxes that intersect Bounds, where PredicateFunc pa..."];
  Node85 -> Node85 [id="edge87_Node000085_Node000085",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node86 [id="edge88_Node000001_Node000086",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node86 [id="Node000086",label="UE::MovieScene::TOverlapping\lEntityTrackerImpl\< OutputType,\l InputTypes... \>::ProcessInvalidated\lOutputs",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/de1/structUE_1_1MovieScene_1_1TOverlappingEntityTrackerImpl.html#a85770bbdeaefc838fafaf7b309e2bed0",tooltip=" "];
  Node1 -> Node87 [id="edge89_Node000001_Node000087",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node87 [id="Node000087",label="UE::Geometry::FSparseDynamic\lPointOctree3::RangeQuery",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/dcf/classUE_1_1Geometry_1_1FSparseDynamicPointOctree3.html#aae86745a1b8d2397a3188b58a5bc6013",tooltip="Collect PointIDs from all the cells with bounding boxes that intersect Bounds, where PredicateFunc pa..."];
  Node87 -> Node87 [id="edge90_Node000087_Node000087",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node88 [id="edge91_Node000001_Node000088",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node88 [id="Node000088",label="TSlotlessChildren::\lReset",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/dfb/classTSlotlessChildren.html#a50f6f6c7ac13daa334ceb1bb9dc76fad",tooltip=" "];
  Node1 -> Node89 [id="edge92_Node000001_Node000089",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node89 [id="Node000089",label="TDeltaSetup::FReader\l::Scatter",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/dab/structTDeltaSetup_1_1FReader.html#aa22a75b5806954ee3cdbc712d9f8a539",tooltip=" "];
  Node1 -> Node90 [id="edge93_Node000001_Node000090",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node90 [id="Node000090",label="TDeltaSetup::FReader\l::Scatter",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/dab/structTDeltaSetup_1_1FReader.html#abbc9a3eb6ffdea0acfc0d31f25c533ac",tooltip=" "];
  Node1 -> Node91 [id="edge94_Node000001_Node000091",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node91 [id="Node000091",label="UCLASS",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/d43/Actor_8h.html#a423673fc0112544852d21aa5fa46cd19",tooltip="Actor is the base class for an Object that can be placed or spawned in a level."];
  Node1 -> Node92 [id="edge95_Node000001_Node000092",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node92 [id="Node000092",label="UE::Anim::FNamedValueArray\lUtils::Union",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d9/df7/structUE_1_1Anim_1_1FNamedValueArrayUtils.html#afb98193662bd93f96fef9cb60d2eee5b",tooltip=" "];
  Node1 -> Node93 [id="edge96_Node000001_Node000093",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node93 [id="Node000093",label="USTRUCT",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d1d/WorldDataLayers_8h.html#a59a98a8a7020285addd93f904fe59147",tooltip=" "];
  Node1 -> Node94 [id="edge97_Node000001_Node000094",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node94 [id="Node000094",label="USTRUCT",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/dd1/RigVMProfilingInfo_8h.html#a1af15b98342c2801c3cd531acede2ba2",tooltip=" "];
}
