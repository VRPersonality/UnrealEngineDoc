digraph "TArray::SetNumUninitialized"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="TArray::SetNumUninitialized",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Resizes array to given number of elements."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="UE::Anim::FCurveUtils\l::BuildUnsorted",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d7/d7e/structUE_1_1Anim_1_1FCurveUtils.html#a057de551fa386ad635d95cd05788b0b7",tooltip=" "];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="UE::Geometry::TDynamicMesh\lOverlay::CompactCopy",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d7/de6/classUE_1_1Geometry_1_1TDynamicMeshOverlay.html#aa47ba3bb806a7315b4abfca8f67f1b7f",tooltip="Copy the Copy overlay to a compact rep, also updating parent references based on the CompactMaps."];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="UE::Geometry::TDynamicMesh\lOverlay::CompactInPlace",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d7/de6/classUE_1_1Geometry_1_1TDynamicMeshOverlay.html#a4274a0cf3fe57876bbdecfc7e6b214c1",tooltip="Compact overlay and update links to parent based on CompactMaps."];
  Node1 -> Node5 [id="edge4_Node000001_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="UE::Geometry::FClusterKMeans\l::ComputeClusters",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d7/dc1/structUE_1_1Geometry_1_1FClusterKMeans.html#abb849bcf81cc079171aba43a29f63da4",tooltip="Compute the K-Means clustering of FVector points."];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="ConvexHull2D::ComputeConvexHull",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/db6/namespaceConvexHull2D.html#aed85326e8a05829519f96add67839eba",tooltip="Andrew's monotone chain convex hull algorithm for 2-dimensional points."];
  Node1 -> Node7 [id="edge6_Node000001_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="UE::MeshDeformation\l::ComputeNumMatrixElements",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/df1/namespaceUE_1_1MeshDeformation.html#a32fd03ba183b8fb7890b0df54b9a4211",tooltip=" "];
  Node7 -> Node8 [id="edge7_Node000007_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="UE::MeshDeformation\l::ConstructCotangentLaplacian",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/df1/namespaceUE_1_1MeshDeformation.html#abb5ba9e1b374edf6d77271067c602718",tooltip="Construct a sparse matrix representation using a cotangent-weighted Laplacian."];
  Node7 -> Node9 [id="edge8_Node000007_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="UE::MeshDeformation\l::ConstructCotangentLaplacian",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/df1/namespaceUE_1_1MeshDeformation.html#aaf997123f9e9bc9c6853c6ba0330b986",tooltip="Construct a sparse matrix representation using a pre-multiplied cotangent-weighted Laplacian."];
  Node7 -> Node10 [id="edge9_Node000007_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="UE::MeshDeformation\l::ConstructFullCotangentLaplacian",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/df1/namespaceUE_1_1MeshDeformation.html#ae792924418f806431fc29afa28c3716f",tooltip="Construct sparse Cotangent Laplacian matrix."];
  Node7 -> Node11 [id="edge10_Node000007_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="UE::MeshDeformation\l::ConstructFullIDTCotangent\lLaplacian",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/df1/namespaceUE_1_1MeshDeformation.html#a65dc6e343bd575c6673bf8c0b482ffde",tooltip="Use intrinsic Delaunay mesh to construct sparse Cotangent Laplacian matrix."];
  Node7 -> Node12 [id="edge11_Node000007_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="UE::MeshDeformation\l::ConstructIDTCotangentLaplacian",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/df1/namespaceUE_1_1MeshDeformation.html#ad7e9fddf45aa4a169e3cec1788bd8eee",tooltip="Construct a sparse matrix representation using a pre-multiplied cotangent-weighted Laplacian,..."];
  Node7 -> Node13 [id="edge12_Node000007_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="UE::MeshDeformation\l::ConstructMeanValueWeight\lLaplacian",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/df1/namespaceUE_1_1MeshDeformation.html#a8cfb166d2dee288b2c69e7a3942f1f16",tooltip="Construct a sparse matrix representation using a meanvalue-weighted Laplacian."];
  Node7 -> Node14 [id="edge13_Node000007_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="UE::MeshDeformation\l::ConstructUmbrellaLaplacian",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/df1/namespaceUE_1_1MeshDeformation.html#a1e94c672286fff67d41a1398142f4827",tooltip="Construct a sparse matrix representation of an umbrella weighted Laplacian."];
  Node7 -> Node15 [id="edge14_Node000007_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="UE::MeshDeformation\l::ConstructUniformLaplacian",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/df1/namespaceUE_1_1MeshDeformation.html#a694b1bb9f614a1046908e13b7315c5f7",tooltip="Construct a sparse matrix representation of a uniform weighted Laplacian."];
  Node7 -> Node16 [id="edge15_Node000007_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="UE::MeshDeformation\l::ConstructValenceWeighted\lLaplacian",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/df1/namespaceUE_1_1MeshDeformation.html#a7f0420ccd091c996034cc49e0c4c8ee2",tooltip="Construct a sparse matrix representation of a valence-weighted Laplacian."];
  Node1 -> Node17 [id="edge16_Node000001_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="UE::MeshDeformation\l::ConstructTriangleDataArray",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/df1/namespaceUE_1_1MeshDeformation.html#ad8780349428dfee6b9e4c2b338ee5ffc",tooltip="Return and array in triangle order that holds the per-triangle derived data needed."];
  Node17 -> Node8 [id="edge17_Node000017_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node9 [id="edge18_Node000017_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node10 [id="edge19_Node000017_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node13 [id="edge20_Node000017_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node14 [id="edge21_Node000001_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node16 [id="edge22_Node000001_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node18 [id="edge23_Node000001_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="TSparseArray\< SetElement\lType, typename Allocator\l::SparseArrayAllocator \>\l::CopyUnfrozen",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/db8/classTSparseArray.html#ad1886d6e3838cddf84067d69abbf9b16",tooltip=" "];
  Node1 -> Node19 [id="edge24_Node000001_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="UE::Geometry::FArrowGenerator\l::Generate",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/d57/classUE_1_1Geometry_1_1FArrowGenerator.html#a2982ccc4942c3c605332cf8ae9a8bac9",tooltip="Generate the mesh."];
  Node1 -> Node20 [id="edge25_Node000001_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="FMeshDescription::GetPolygon\lPerimeterEdges",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#a85191c3def30743c740ac5fec86ae5a8",tooltip="Populates the passed array with the edges which form the polygon perimeter."];
  Node20 -> Node21 [id="edge26_Node000020_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="FMeshDescription::GetPolygon\lAdjacentPolygons",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#a8b69dedb041c81e0414d5856d6113224",tooltip="Populates the passed array with adjacent polygons."];
  Node21 -> Node22 [id="edge27_Node000021_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="FMeshDescription::GetPolygon\lAdjacentPolygons",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#af8391ae692103c788daf140691b1ff25",tooltip="Return adjacent polygons into a TArray with the specified allocator."];
  Node20 -> Node23 [id="edge28_Node000020_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="FMeshDescription::GetPolygon\lPerimeterEdges",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#aeac18df72258c47320f0a56c9438ca81",tooltip="Returns the vertices which form the polygon perimeter as an array templated on the given allocator."];
  Node1 -> Node24 [id="edge29_Node000001_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="FMeshDescription::GetPolygon\lVertexInstances",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#a652ac58afd0fd0bead9d57b19322b475",tooltip="Returns reference to an array of VertexInstance IDs forming the perimeter of this polygon."];
  Node24 -> Node25 [id="edge30_Node000024_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="FMeshDescription::GetPolygon\lInternalEdges",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#ab09c0ab70b3658659bf8a95eadfc4e91",tooltip="Populate the provided array with a list of edges which are internal to the polygon,..."];
  Node25 -> Node26 [id="edge31_Node000025_Node000026",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="FMeshDescription::GetPolygon\lInternalEdges",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#aee03a54270ded29ed22eddb9c8049358",tooltip="Return the internal edges of this polygon, i.e."];
  Node24 -> Node27 [id="edge32_Node000024_Node000027",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="FMeshDescription::GetPolygon\lVertexInstances",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#a3a980a3c0745685af686098fffc97476",tooltip=" "];
  Node24 -> Node28 [id="edge33_Node000024_Node000028",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="FMeshDescription::GetVertex\lInstanceForPolygonVertex",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#ae3ce58da58287d3749e70fc118a1c1d3",tooltip="Return the vertex instance which corresponds to the given vertex on the given polygon,..."];
  Node1 -> Node29 [id="edge34_Node000001_Node000029",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="FMeshDescription::GetPolygon\lVertices",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#a6e0baa52e429477442e4dd45b752eac0",tooltip="Populates the passed array of VertexIDs with the vertices which form the polygon perimeter."];
  Node29 -> Node30 [id="edge35_Node000029_Node000030",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="FMeshDescription::GetPolygon\lVertices",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#a99d45a709acdd2ca144cacf6a1d581aa",tooltip="Returns the vertices which form the polygon perimeter as an array templated on the given allocator."];
  Node1 -> Node31 [id="edge36_Node000001_Node000031",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="FMeshDescription::GetVertex\lAdjacentVertices",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#aa3dde5d758688b25d3b5abe1eac7977e",tooltip="Populates the passed array of VertexIDs with the vertices adjacent to this vertex."];
  Node31 -> Node32 [id="edge37_Node000031_Node000032",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="FMeshDescription::GetVertex\lAdjacentVertices",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d5f/structFMeshDescription.html#ad4f4083d64ec137bb37eafbead317845",tooltip="Returns the vertices adjacent to this vertex as an array with the specified allocator template type."];
  Node1 -> Node33 [id="edge38_Node000001_Node000033",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="FCSPose::LocalBlendCSBone\lTransforms",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/d72/structFCSPose.html#af43ff1fb954084f8c5135898d028e56c",tooltip="Blends Component Space transforms to MeshPose in Local Space."];
  Node1 -> Node34 [id="edge39_Node000001_Node000034",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node34 [id="Node000034",label="UE::Geometry::FSparseDynamic\lPointOctree3::ParallelInsertDense\lPointSet",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/dcf/classUE_1_1Geometry_1_1FSparseDynamicPointOctree3.html#a4dd5e627ca0df8e0fcd0bd51802fc870",tooltip="Insert a set of dense points with IDs in range [0, MaxPointID-1], in parallel."];
  Node1 -> Node35 [id="edge40_Node000001_Node000035",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="UE::Geometry::TPolygon2\l\< double \>::PolyOffset",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/df8/classUE_1_1Geometry_1_1TPolygon2.html#afa9e853694060da8192289c6a63c93c9",tooltip=" "];
  Node1 -> Node36 [id="edge41_Node000001_Node000036",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="TDeltaSetup::FReader\l::Scatter",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/dab/structTDeltaSetup_1_1FReader.html#aa22a75b5806954ee3cdbc712d9f8a539",tooltip=" "];
  Node1 -> Node37 [id="edge42_Node000001_Node000037",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="TDeltaSetup::FReader\l::Scatter",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/dab/structTDeltaSetup_1_1FReader.html#abbc9a3eb6ffdea0acfc0d31f25c533ac",tooltip=" "];
  Node1 -> Node38 [id="edge43_Node000001_Node000038",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node38 [id="Node000038",label="UE::Geometry::TPolygon2\l\< double \>::Simplify",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/df8/classUE_1_1Geometry_1_1TPolygon2.html#a442038d13acd3a8876b9b31fb9ebf165",tooltip=" "];
  Node1 -> Node39 [id="edge44_Node000001_Node000039",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node39 [id="Node000039",label="RangedForIteratorType\l::UE_ALLOWSHRINKING_BOOL\l_DEPRECATED",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d52/classTArray.html#a5e6241df28bc21fbbf58b239dd75388b",tooltip=" "];
  Node1 -> Node40 [id="edge45_Node000001_Node000040",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node40 [id="Node000040",label="UE::Geometry::TPolygon2\l\< double \>::VtxNormalOffset",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/df8/classUE_1_1Geometry_1_1TPolygon2.html#a345074fc2c0bf5bb9f195625d8d4e5da",tooltip=" "];
}
