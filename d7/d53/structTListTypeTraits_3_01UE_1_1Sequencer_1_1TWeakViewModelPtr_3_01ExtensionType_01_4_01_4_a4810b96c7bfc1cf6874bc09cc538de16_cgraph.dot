digraph "TListTypeTraits&lt; UE::Sequencer::TWeakViewModelPtr&lt; ExtensionType &gt; &gt;::DebugDump"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="TListTypeTraits\< UE\l::Sequencer::TWeakViewModel\lPtr\< ExtensionType \> \>::\lDebugDump",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="UE::Sequencer::TViewModel\lPtr::AsModel",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$df/d5a/structUE_1_1Sequencer_1_1TViewModelPtr.html#a2e9dc9191f005647fd0744bc0a996afe",tooltip="Explicitly access the view model as a regular shared pointer."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="TSharedPtr::Get",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/d2f/classTSharedPtr.html#a34b1891c618f9221537ef6f5edc347a9",tooltip="Returns the object referenced by this pointer, or nullptr if no object is reference."];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="UE::Sequencer::TWeakView\lModelPtr::Pin",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/d4d/structUE_1_1Sequencer_1_1TWeakViewModelPtr.html#a17d82577f2b348c65d41dca016f01c88",tooltip="Pin this weak view model ptr."];
}
