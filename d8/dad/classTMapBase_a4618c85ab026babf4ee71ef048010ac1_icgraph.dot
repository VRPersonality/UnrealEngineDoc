digraph "TMapBase::Reserve"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="TMapBase::Reserve",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Preallocates enough memory to contain Number elements."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="UE::PixelStreaming2\l::TThreadSafeMap::TThreadSafeMap",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/d49/classUE_1_1PixelStreaming2_1_1TThreadSafeMap.html#a5d81c4fd495306b980f7d8115d6aadbf",tooltip="Constructor which gets its elements from a native initializer list."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="TConstKeyIterator::\lAppend",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/df5/classTMultiMap.html#a4871662d195176727f8f3015368325d7",tooltip=" "];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="TConstKeyIterator::\lAppend",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/df5/classTMultiMap.html#a1a9d97a58a7a6e55b89227f639ef741f",tooltip=" "];
  Node1 -> Node5 [id="edge4_Node000001_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="UE::PixelStreaming2\l::TThreadSafeMap::Append",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/d49/classUE_1_1PixelStreaming2_1_1TThreadSafeMap.html#a02bc417c428bf2f1f1c1ea0fccf80ae4",tooltip="Add all items from another map to our map (if any keys are in both, the value from the other map wins..."];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="UE::PixelStreaming2\l::TThreadSafeMap::Append",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/d49/classUE_1_1PixelStreaming2_1_1TThreadSafeMap.html#af82466173c0fc9db94d2c8f9f449fc71",tooltip="Move all items from another map into our map (if any keys are in both, the value from the other map w..."];
  Node1 -> Node7 [id="edge6_Node000001_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="UE::Graph::ConvertToGraph",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/d33/namespaceUE_1_1Graph.html#aa5c899f112dccf29af8f5200170f4661",tooltip="Convert an array of Keys and a function that returns the directed edges from each Key into the Normal..."];
  Node1 -> Node8 [id="edge7_Node000001_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="UE::Geometry::TMeshQueries\l::ExpandVertexSelectionToNeighbors",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d39/classUE_1_1Geometry_1_1TMeshQueries.html#aaa057d321de86c6c3f584f7edfae3b14",tooltip="Expand selection of vertices with one-ring neighbors."];
  Node1 -> Node9 [id="edge8_Node000001_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="TMapBase::FilterByPredicate",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dad/classTMapBase.html#a1bb17f51772bfab786326a7a2dbe9d78",tooltip="Filters the elements in the map based on a predicate functor."];
  Node1 -> Node10 [id="edge9_Node000001_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="FPersistentStorageManager\l::GenerateCategoryStats",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/ddb/classFPersistentStorageManager.html#a7ce3e3fe06e487109506a7087ee354c2",tooltip=" "];
  Node1 -> Node11 [id="edge10_Node000001_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="AlgoImpl::KahnTopological\lSort_CreateWorkingGraph",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d64/namespaceAlgoImpl.html#a834c07ecadcd8dd1c1dbe4be6a5cbeff",tooltip="Convert UniqueRange and GetElementDependencies into handles, dependency count, dependencies,..."];
  Node11 -> Node12 [id="edge11_Node000011_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="Algo::KahnTopologicalSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d33/namespaceAlgo.html#a231003554c827f132ff7e767bf161b4d",tooltip="Public entrypoint."];
  Node12 -> Node13 [id="edge12_Node000012_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="Algo::TopologicalSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d33/namespaceAlgo.html#a019f59012ba87e9c255a73934d81f33b",tooltip="Sorts the given range in leaf to root order: For every pair of elements (A,B) where SortedIndex(A) < ..."];
  Node1 -> Node14 [id="edge13_Node000001_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="UE::Geometry::TDynamicVertex\lSkinWeightsAttribute\< FDynamicMesh3\l \>::ReindexBoneIndicesToSkeleton",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/d3e/classUE_1_1Geometry_1_1TDynamicVertexSkinWeightsAttribute.html#a368f608125e666190ddf5cddfc55c534",tooltip=" "];
  Node1 -> Node15 [id="edge14_Node000001_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="TConstKeyIterator::\lTMultiMap",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/df5/classTMultiMap.html#a459cdcba1fe277663afe169a9ba2b157",tooltip=" "];
}
