digraph "UE::Math::TRotator::ClampAxis"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="UE::Math::TRotator\l::ClampAxis",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Clamps an angle to the range of [0, 360)."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="UE::Math::TRotator\l::Clamp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dd7/structUE_1_1Math_1_1TRotator.html#a296e37c6fec007335e4c8f3219be9a4a",tooltip="Gets the rotation values so they fall within the range [0,360]."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="FMath::ClampAngle",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/d20/structFMath.html#a37d6afd9532c6a31cb4e3a0f59836f75",tooltip=" "];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="UE::Math::TRotator\l::GetDenormalized",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dd7/structUE_1_1Math_1_1TRotator.html#a2e2013f282eff75b41ea8b9c68e2afc4",tooltip="Create a copy of this rotator and denormalize, clamping each axis to 0 - 360."];
  Node1 -> Node5 [id="edge4_Node000001_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="UE::Math::TRotator\l::IsZero",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dd7/structUE_1_1Math_1_1TRotator.html#a336b1bd81022373f023f40eec924dcfb",tooltip="Checks whether this has exactly zero rotation, when treated as an orientation."];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="UE::Math::TRotator\l::NormalizeAxis",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dd7/structUE_1_1Math_1_1TRotator.html#a79c9fd8c1103296807d5f67985697cbc",tooltip="Clamps an angle to the range of (-180, 180]."];
  Node6 -> Node3 [id="edge6_Node000006_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 -> Node7 [id="edge7_Node000006_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="UE::Math::TRotator\l::Equals",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dd7/structUE_1_1Math_1_1TRotator.html#a084aa736afda200320b502b7177bb58d",tooltip="Checks whether two rotators are equal within specified tolerance, when treated as an orientation."];
  Node6 -> Node8 [id="edge8_Node000006_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="UE::Math::TRotator\l::IsNearlyZero",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dd7/structUE_1_1Math_1_1TRotator.html#ae36323bb8aa4b8858d05dd8cbdf18b7c",tooltip="Checks whether rotator is nearly zero within specified tolerance, when treated as an orientation."];
  Node8 -> Node9 [id="edge9_Node000008_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="FStreamingSourceShapeHelper\l::ForEachShape",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$df/dce/classFStreamingSourceShapeHelper.html#a0175346802e1004a8919c6c45dc6192e",tooltip=" "];
  Node9 -> Node10 [id="edge10_Node000009_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="FWorldPartitionStreaming\lSource::ForEachShape",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/d3b/structFWorldPartitionStreamingSource.html#aef634712330db864356588e4c7d16317",tooltip="Helper method that iterates over all shapes."];
  Node10 -> Node11 [id="edge11_Node000010_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="FWorldPartitionStreaming\lSource::CalcBounds",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/d3b/structFWorldPartitionStreamingSource.html#aba4b9b7ade68adba38b88d91981b0526",tooltip="Returns a box encapsulating all shapes."];
  Node11 -> Node11 [id="edge12_Node000011_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 -> Node12 [id="edge13_Node000009_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="FWorldPartitionStreaming\lSource::ForEachShape",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/d3b/structFWorldPartitionStreamingSource.html#a427a93d0f127679698e3b525560693bf",tooltip="Helper method that iterates over all shapes affecting a specific grid."];
  Node8 -> Node13 [id="edge14_Node000008_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="UE::Math::TRotator\l::ToCompactString",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dd7/structUE_1_1Math_1_1TRotator.html#a669598e9ed4b556c9f364029262a2efe",tooltip="Get a short textural representation of this vector, for compact readable logging."];
  Node6 -> Node14 [id="edge15_Node000006_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="UE::Math::TRotator\l::Normalize",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dd7/structUE_1_1Math_1_1TRotator.html#a1aeeaa85316c4883abdcd1cd8fa3e66d",tooltip="In-place normalize, removes all winding and creates the \"shortest route\" rotation."];
  Node14 -> Node15 [id="edge16_Node000014_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="UE::Math::TRotator\l::GetNormalized",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dd7/structUE_1_1Math_1_1TRotator.html#a5a6ca36a05289441b12eb8c4d8e2948a",tooltip="Create a copy of this rotator and normalize, removes all winding and creates the \"shortest route\" rot..."];
  Node15 -> Node16 [id="edge17_Node000015_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="FMath::LerpRange",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/d20/structFMath.html#a8e070e636fff28b1b1f076f71a8218db",tooltip=" "];
  Node15 -> Node17 [id="edge18_Node000015_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="FRotationConversionCache\l::RotatorToQuat",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$df/d09/structFRotationConversionCache.html#ab2d08cb7cbeb5e985c5787298523ff55",tooltip="Convert a FRotator to FQuat."];
}
