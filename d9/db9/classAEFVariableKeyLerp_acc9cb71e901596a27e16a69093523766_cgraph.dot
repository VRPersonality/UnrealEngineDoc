digraph "AEFVariableKeyLerp::GetBoneAtomRotation"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="AEFVariableKeyLerp\l::GetBoneAtomRotation",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Decompress the Rotation component of a BoneAtom."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="DecompressRotation",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/dc6/AnimationCompression_8h.html#aeb2ef30c0607ddc6a26965d2ed02e682",tooltip="Templated Rotation Decompressor."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="FQuatFixed32NoW::ToQuat",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d9f/classFQuatFixed32NoW.html#a4ac83a6337214a00a97f7a4e2c7bfeee",tooltip=" "];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="AnimationCompressionUtils\l::UnalignedRead",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/dc2/namespaceAnimationCompressionUtils.html#aab3acd88a567b8a3e00af1baeafa72ad",tooltip=" "];
  Node2 -> Node5 [id="edge4_Node000002_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="FQuatFloat32NoW::ToQuat",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/d68/classFQuatFloat32NoW.html#a25cfa16841a39d09f9b07034667fd921",tooltip=" "];
  Node5 -> Node6 [id="edge5_Node000005_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="TFloatPacker::Decode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/d20/classTFloatPacker.html#ae2cad4dc3e001408789f9a8bb38a7b20",tooltip=" "];
  Node5 -> Node4 [id="edge6_Node000005_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node7 [id="edge7_Node000002_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="FQuatFloat96NoW::ToQuat",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$df/d77/classFQuatFloat96NoW.html#ac4b1c828aa02f80d65a956de88bd6d21",tooltip=" "];
  Node7 -> Node4 [id="edge8_Node000007_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node8 [id="edge9_Node000002_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="FQuatIntervalFixed32NoW\l::ToQuat",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/dde/classFQuatIntervalFixed32NoW.html#ae82d3a4fb4b9778fd0408d55395fb54a",tooltip=" "];
  Node8 -> Node4 [id="edge10_Node000008_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node4 [id="edge11_Node000002_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node9 [id="edge12_Node000001_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="UE::Math::TQuat\< float\l \>::FastLerp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/d4a/structUE_1_1Math_1_1TQuat.html#ad56274f9b889664a0598933c52b19cf8",tooltip=" "];
  Node1 -> Node10 [id="edge13_Node000001_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="FAnimSequenceDecompression\lContext::GetRelativePosition",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/d67/structFAnimSequenceDecompressionContext.html#a868eb93fbb0396de0d066e15c0ed0164",tooltip=" "];
  Node1 -> Node11 [id="edge14_Node000001_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="UE::Math::TQuat::Normalize",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/d4a/structUE_1_1Math_1_1TQuat.html#a02b564d66c1c1b1df24426dbee01c4ee",tooltip="Normalize this quaternion if it is large enough."];
  Node11 -> Node12 [id="edge15_Node000011_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="UE::Math::TQuat::Vector",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/d4a/structUE_1_1Math_1_1TQuat.html#aa19243ea9ed20bd1d0023248a1dfdf0e",tooltip="Convert a rotation into a unit vector facing in its direction."];
  Node12 -> Node13 [id="edge16_Node000012_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="UE::Math::TQuat::GetAxisX",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/d4a/structUE_1_1Math_1_1TQuat.html#a957398e9f2ad9fd9b6590c74888498cc",tooltip="Get the forward direction (X axis) after it has been rotated by this Quaternion."];
  Node13 -> Node14 [id="edge17_Node000013_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="UE::Math::TQuat::RotateVector",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/d4a/structUE_1_1Math_1_1TQuat.html#ae2a77a1d3fcc813fdfc299c3c10eda84",tooltip="Rotate a vector by this quaternion."];
  Node14 -> Node15 [id="edge18_Node000014_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="UE::Math::TVector::\lCrossProduct",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$de/d77/structUE_1_1Math_1_1TVector.html#ac1f74b10c82cb7642c056c5f8d056036",tooltip="Calculate the cross product of two vectors."];
  Node15 -> Node16 [id="edge19_Node000015_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="UE::Math::TVector::\lTVector",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$de/d77/structUE_1_1Math_1_1TVector.html#a50071892cd411543cbbb3d9d35a6f277",tooltip="Default constructor (no initialization)."];
  Node11 -> Node17 [id="edge20_Node000011_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="VectorCompareGE",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#a9791076615abb89cb4362641d3cbe91f",tooltip="Creates a four-part mask based on component-wise >= compares of the input vectors."];
  Node17 -> Node18 [id="edge21_Node000017_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="MakeVectorRegisterFloat",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#aefc67d5a07d1692613a29d8c9f71e815",tooltip="Returns a bitwise equivalent vector based on 4 DWORDs."];
  Node11 -> Node19 [id="edge22_Node000011_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="VectorDot4",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#a228a2afa492d30626e0459e5c88b9ae9",tooltip="Calculates the dot4 product of two vectors and returns a vector with the result in all 4 components."];
  Node19 -> Node18 [id="edge23_Node000019_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node11 -> Node20 [id="edge24_Node000011_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="VectorLoadAligned",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#a795bf143be99fa9c21053ce7ee7367ee",tooltip="Loads 4 FLOATs from aligned memory."];
  Node20 -> Node21 [id="edge25_Node000020_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="VectorLoad",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#acf012ed0bd0dbebc7aadab0ba8a1f808",tooltip="Loads 4 FLOATs from unaligned memory."];
  Node21 -> Node18 [id="edge26_Node000021_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node11 -> Node22 [id="edge27_Node000011_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="VectorLoadFloat1",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#a521f9236ca718421a1c6dc3325676dbe",tooltip="Loads 1 float from unaligned memory and replicates it to all 4 elements."];
  Node22 -> Node18 [id="edge28_Node000022_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node11 -> Node23 [id="edge29_Node000011_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="VectorMultiply",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#a498979d68d58aebba11252fe447acc0e",tooltip="Multiplies two vectors (component-wise) and returns the result."];
  Node11 -> Node24 [id="edge30_Node000011_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="VectorSelect",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#a80d0251c859b099e8d3bad3443cfc5ea",tooltip="Does a bitwise vector selection based on a mask (e.g., created from VectorCompareXX)"];
  Node24 -> Node18 [id="edge31_Node000024_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node11 -> Node25 [id="edge32_Node000011_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="VectorStoreAligned",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#aac7505e05c44791186788055ed24e936",tooltip="Stores a vector to aligned memory."];
  Node25 -> Node26 [id="edge33_Node000025_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="FMemory::Memcpy",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$de/d4a/structFMemory.html#af5c0a2f1987809876d6d72269851e89c",tooltip=" "];
  Node26 -> Node27 [id="edge34_Node000026_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="FGenericPlatformMemory\l::Memcpy",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/dfd/structFGenericPlatformMemory.html#a13ca9511967a7af8d1c2c3beab1208e2",tooltip=" "];
  Node1 -> Node28 [id="edge35_Node000001_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="UE::Math::TTransform\l::SetRotation",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d9/db6/structUE_1_1Math_1_1TTransform.html#ac7e89d5b26b2d32f2260328fc95f24b4",tooltip="Sets the rotation component."];
  Node1 -> Node29 [id="edge36_Node000001_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="AnimEncoding::TimeToIndex",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/d6a/classAnimEncoding.html#a2d2c0a0720cea981837dffbb79a75edd",tooltip="Handles Byte-swapping incoming animation data from a MemoryReader."];
}
