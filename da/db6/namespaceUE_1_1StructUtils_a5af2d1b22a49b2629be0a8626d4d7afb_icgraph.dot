digraph "UE::StructUtils::GetStructPtr"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="UE::StructUtils::GetStructPtr",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Returns pointer to the struct, or nullptr if cast is not valid."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="FConstStructView::GetPtr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$de/d57/structFConstStructView.html#a7823687f9dbd5a63175a97399d37d0c1",tooltip="Returns const pointer to the struct, or nullptr if cast is not valid."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="FStructView::GetPtr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/d94/structFStructView.html#a82575c9835528191de735134c4362700",tooltip="Returns mutable pointer to the struct, or nullptr if cast is not valid."];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="TConstStructView::GetPtr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/db1/structTConstStructView.html#afb2e89d146e7bbe0917a841c9180a53c",tooltip="Returns const pointer to the struct, or nullptr if cast is not valid."];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="TConstStructView::operator-\>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/db1/structTConstStructView.html#a8e052f4ce485ab8888eaf5462d663bf4",tooltip="Simplified accessor for members of the guaranteed minimum structure type."];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="TStructView::GetPtr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$de/d10/structTStructView.html#a982b248ca9e5e9e861dd856584f03cce",tooltip="Returns mutable pointer to the struct, or nullptr if cast is not valid."];
  Node6 -> Node7 [id="edge6_Node000006_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="TStructView::operator-\>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$de/d10/structTStructView.html#a0df76c6fb072af6f4a36fcae33bf7993",tooltip="Simplified accessor for members of the guaranteed minimum structure type."];
  Node1 -> Node8 [id="edge7_Node000001_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="FConstStructArrayView\l::GetPtrAt",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d8f/structFConstStructArrayView.html#aa85c030d7c81bea5183b33306928834a",tooltip="Returns pointer to element at given index."];
  Node1 -> Node9 [id="edge8_Node000001_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="FStructArrayView::GetPtrAt",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dda/structFStructArrayView.html#aa71323b6dae6c1e409e844fea3ab1aa7",tooltip="Returns pointer to element at given index."];
  Node1 -> Node10 [id="edge9_Node000001_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="UE::StructUtils::GetStructPtr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$da/db6/namespaceUE_1_1StructUtils.html#a601f5844da65b4c701f0658b0c352542",tooltip="Returns const pointer to the struct, or nullptr if cast is not valid."];
  Node1 -> Node11 [id="edge10_Node000001_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="USTRUCT",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/da1/StructUtils_2SharedStruct_8h.html#a630f4154ed37d37254fe38d6da615fb1",tooltip="FSharedStruct works similarly as a TSharedPtr<FInstancedStruct> but avoids the double pointer indirec..."];
  Node1 -> Node12 [id="edge11_Node000001_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="USTRUCT",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/dc6/StructUtils_2InstancedStruct_8h.html#adcb2836d5087af74eeea9038a8366299",tooltip="FInstancedStruct works similarly as instanced UObject* property but is USTRUCTs."];
}
