digraph "Algo::TopologicalSort"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="Algo::TopologicalSort",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Sorts the given range in leaf to root order: For every pair of elements (A,B) where SortedIndex(A) < ..."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="Forward",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d24/UnrealTemplate_8h.html#a68f280c1d561a8899a1e9e3ea8405d00",tooltip="Forward will cast a reference to an rvalue reference."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="Algo::KahnTopologicalSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d33/namespaceAlgo.html#a231003554c827f132ff7e767bf161b4d",tooltip="Public entrypoint."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="TArray::Add",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d52/classTArray.html#a94f6bf2bef04382fc79010abad57d823",tooltip="Adds a new item to the end of the array, possibly reallocating the whole array to fit."];
  Node3 -> Node5 [id="edge4_Node000003_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="TSet::Add",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d15/classTSet.html#a05039d1023441fe5b0cc3f3d7476afdc",tooltip="Adds an element to the set."];
  Node3 -> Node6 [id="edge5_Node000003_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="EnumHasAnyFlags",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/de7/EnumClassFlags_8h.html#a584482cc5c314e3e8ea8d24c7adf9f6e",tooltip=" "];
  Node3 -> Node7 [id="edge6_Node000003_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="AlgoImpl::FindMostIndependent\lMutuallyReachableVertexSet",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d64/namespaceAlgoImpl.html#af38ce7f2d6efaf327a9c7223fdc54bbd",tooltip="Called when there is a MutuallyReachableVertexSet (aka no vertices are independent)."];
  Node7 -> Node4 [id="edge7_Node000007_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node5 [id="edge8_Node000007_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node8 [id="edge9_Node000007_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="TSet::Append",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d15/classTSet.html#a0ee8db563337a534b5e0f50ca82fda66",tooltip=" "];
  Node7 -> Node9 [id="edge10_Node000007_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="TSet::Contains",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d15/classTSet.html#af58f71114b2e40cc3c5dea171832855f",tooltip="Checks if the element contains an element with the given key."];
  Node7 -> Node10 [id="edge11_Node000007_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="TSet::CreateIterator",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d15/classTSet.html#a3494f81c964331e3864a00c4362053d7",tooltip="Creates an iterator for the contents of this set."];
  Node7 -> Node11 [id="edge12_Node000007_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="TSet::Intersect",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d15/classTSet.html#a71e1e59fbc130d8a7bad8e178b7d6cf3",tooltip=" "];
  Node7 -> Node12 [id="edge13_Node000007_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="TArray::IsEmpty",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d52/classTArray.html#a2c57f7971567594e23017eb0b92eadfe",tooltip="Returns true if the array is empty and contains no elements."];
  Node7 -> Node13 [id="edge14_Node000007_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="TSet::IsEmpty",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d15/classTSet.html#ac72aa5118c8d54a87a6fc3115ba1a749",tooltip="Returns true if the sets is empty and contains no elements."];
  Node7 -> Node14 [id="edge15_Node000007_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="TArray::Num",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d52/classTArray.html#adcbf9ca48677a9c0c3830cd862dd40d8",tooltip="Returns number of elements in array."];
  Node7 -> Node15 [id="edge16_Node000007_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="TArray::Pop",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d52/classTArray.html#af75d51184a3b156af56c964be466bce7",tooltip="Pops element from the array."];
  Node7 -> Node16 [id="edge17_Node000007_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="TSet::Remove",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d15/classTSet.html#ab2fcfc544958d3f31dabcb375e307123",tooltip="Removes an element from the set."];
  Node7 -> Node17 [id="edge18_Node000007_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="TArray::Reserve",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d52/classTArray.html#a9225b97632948348a65bb19ff212bc08",tooltip="Reserves memory such that the array can contain at least Number elements."];
  Node7 -> Node18 [id="edge19_Node000007_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="TSet::Reserve",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d15/classTSet.html#aaaacdfac42423bbd0a700754e46b6b63",tooltip="Preallocates enough memory to contain Number elements."];
  Node7 -> Node19 [id="edge20_Node000007_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="TArray::Reset",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d52/classTArray.html#a246ab624b720b01fd83764700aab8cf9",tooltip="Same as empty, but doesn't change memory allocations, unless the new size is larger than the current ..."];
  Node7 -> Node20 [id="edge21_Node000007_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="TSet::Reset",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d15/classTSet.html#ace85939a5820b4917bbf85e56b4c8a7e",tooltip="Efficiently empties out the set but preserves all allocations and capacities."];
  Node3 -> Node2 [id="edge22_Node000003_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node13 [id="edge23_Node000003_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node21 [id="edge24_Node000003_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="AlgoImpl::KahnTopological\lSort_CreateWorkingGraph",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d64/namespaceAlgoImpl.html#a834c07ecadcd8dd1c1dbe4be6a5cbeff",tooltip="Convert UniqueRange and GetElementDependencies into handles, dependency count, dependencies,..."];
  Node21 -> Node4 [id="edge25_Node000021_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node21 -> Node5 [id="edge26_Node000021_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node21 -> Node22 [id="edge27_Node000021_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="TMapBase::Find",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dad/classTMapBase.html#a1e25fd58981a008a6973a5695b915333",tooltip="Find the value associated with a specified key."];
  Node21 -> Node23 [id="edge28_Node000021_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="TMapBase::FindOrAdd",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dad/classTMapBase.html#ad29b334f3b98ea66e445656d0dba02e7",tooltip="Find the value associated with a specified key, or if none exists, adds a value using the default con..."];
  Node23 -> Node24 [id="edge29_Node000023_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="TMapBase::FindOrAddImpl",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dad/classTMapBase.html#abfd8d193c323dea388199485fa179c20",tooltip="Find the value associated with a specified key, or if none exists, adds a value using the default con..."];
  Node24 -> Node25 [id="edge30_Node000024_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="TMapBase::AddByHash",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dad/classTMapBase.html#a10136d89a3352b9b29087292c84812c4",tooltip="See Add() and class documentation section on ByHash() functions."];
  Node25 -> Node26 [id="edge31_Node000025_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="TMapBase::EmplaceByHash",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dad/classTMapBase.html#a3512beb7013468b57ddbc6775269c533",tooltip="See Emplace() and class documentation section on ByHash() functions."];
  Node26 -> Node2 [id="edge32_Node000026_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node24 -> Node2 [id="edge33_Node000024_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node27 [id="edge34_Node000023_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="TMapBase::HashKey",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dad/classTMapBase.html#a96e0330315298ca1f5384a60f05b5afd",tooltip=" "];
  Node21 -> Node28 [id="edge35_Node000021_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="GetNum",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/ddf/StringConv_8h.html#a3caf5874b63a514dc33c219ec83eedbf",tooltip=" "];
  Node21 -> Node29 [id="edge36_Node000021_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="Invoke",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d7/deb/Invoke_8h.html#a66d3e79358998f56001f20726270e390",tooltip="Invokes a callable with a set of arguments."];
  Node29 -> Node2 [id="edge37_Node000029_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node21 -> Node14 [id="edge38_Node000021_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node21 -> Node30 [id="edge39_Node000021_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="TMapBase::Reserve",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dad/classTMapBase.html#a4618c85ab026babf4ee71ef048010ac1",tooltip="Preallocates enough memory to contain Number elements."];
  Node21 -> Node31 [id="edge40_Node000021_Node000031",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="TArray::SetNum",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d52/classTArray.html#a38b903bce3a5367f41d2268ee6a58d0a",tooltip="Resizes array to given number of elements."];
  Node21 -> Node32 [id="edge41_Node000021_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="Algo::Sort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d33/namespaceAlgo.html#aef29409be7f7cb7add90663611cf2f68",tooltip="Sort a range of elements using its operator<."];
  Node32 -> Node2 [id="edge42_Node000032_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node32 -> Node33 [id="edge43_Node000032_Node000033",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="Algo::IntroSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d33/namespaceAlgo.html#a27aaa838c8983478b9802e6c6f85c6f4",tooltip="Sort a range of elements using its operator<."];
  Node33 -> Node34 [id="edge44_Node000033_Node000034",color="steelblue1",style="solid",tooltip=" "];
  Node34 [id="Node000034",label="GetData",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/ddf/StringConv_8h.html#a4111b73e6a9d7101173e7223118962f3",tooltip=" "];
  Node33 -> Node28 [id="edge45_Node000033_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node35 [id="edge46_Node000033_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="AlgoImpl::IntroSortInternal",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d64/namespaceAlgoImpl.html#a37a7c4165e1e25bf8c45acab3742c8a8",tooltip="Implementation of an introspective sort."];
  Node35 -> Node36 [id="edge47_Node000035_Node000036",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="AlgoImpl::HeapSortInternal",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d64/namespaceAlgoImpl.html#a1d24992f3a40bf59b873d3bdc393f000",tooltip="Performs heap sort on the elements."];
  Node36 -> Node37 [id="edge48_Node000036_Node000037",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="AlgoImpl::HeapifyInternal",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d64/namespaceAlgoImpl.html#a960c5a72540b4f45e04d44506a84ae96",tooltip="Builds an implicit min-heap from a range of elements."];
  Node37 -> Node38 [id="edge49_Node000037_Node000038",color="steelblue1",style="solid",tooltip=" "];
  Node38 [id="Node000038",label="AlgoImpl::HeapGetParentIndex",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d64/namespaceAlgoImpl.html#a58ce2e6e63f7c3209fc40561d28bb282",tooltip="Gets the parent index for node at Index."];
  Node37 -> Node39 [id="edge50_Node000037_Node000039",color="steelblue1",style="solid",tooltip=" "];
  Node39 [id="Node000039",label="AlgoImpl::HeapSiftDown",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d64/namespaceAlgoImpl.html#a6bf0cdc3ca5b35c9c9e7fecf1b21a172",tooltip="Fixes a possible violation of order property between node at Index and a child."];
  Node39 -> Node40 [id="edge51_Node000039_Node000040",color="steelblue1",style="solid",tooltip=" "];
  Node40 [id="Node000040",label="AlgoImpl::HeapGetLeftChild\lIndex",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d64/namespaceAlgoImpl.html#af54d7b714e5c50ab93794778c8253b07",tooltip="Gets the index of the left child of node at Index."];
  Node39 -> Node41 [id="edge52_Node000039_Node000041",color="steelblue1",style="solid",tooltip=" "];
  Node41 [id="Node000041",label="AlgoImpl::HeapIsLeaf",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d64/namespaceAlgoImpl.html#ad3eed72dd578f5534884afdbcccf8f39",tooltip="Checks if node located at Index is a leaf or not."];
  Node41 -> Node40 [id="edge53_Node000041_Node000040",color="steelblue1",style="solid",tooltip=" "];
  Node39 -> Node29 [id="edge54_Node000039_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node39 -> Node42 [id="edge55_Node000039_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node42 [id="Node000042",label="Projection",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d7/df0/Projection_8h.html#a13dceeb18d2035bd0b861bf3698ede9f",tooltip="Projection() is a related function to Invoke(), in that it can be used to invoke an object with a set..."];
  Node42 -> Node42 [id="edge56_Node000042_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node42 -> Node43 [id="edge57_Node000042_Node000043",color="steelblue1",style="solid",tooltip=" "];
  Node43 [id="Node000043",label="UE::Core::Private::\lTIsMemberPointerToFunction",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/de6/namespaceUE_1_1Core_1_1Private.html#a6a97c58e76257e63c3e47675427da48b",tooltip=" "];
  Node36 -> Node39 [id="edge58_Node000036_Node000039",color="steelblue1",style="solid",tooltip=" "];
  Node35 -> Node29 [id="edge59_Node000035_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node44 [id="edge60_Node000003_Node000044",color="steelblue1",style="solid",tooltip=" "];
  Node44 [id="Node000044",label="MoveTemp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d24/UnrealTemplate_8h.html#ad5e6c049aeb9c9115fec514ba581dbb6",tooltip="MoveTemp will cast a reference to an rvalue reference."];
  Node3 -> Node14 [id="edge61_Node000003_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node45 [id="edge62_Node000003_Node000045",color="steelblue1",style="solid",tooltip=" "];
  Node45 [id="Node000045",label="TSet::Num",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d15/classTSet.html#a1467586642ab0c99a42be762487875e3",tooltip=" "];
  Node3 -> Node16 [id="edge63_Node000003_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node17 [id="edge64_Node000003_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node18 [id="edge65_Node000003_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node20 [id="edge66_Node000003_Node000020",color="steelblue1",style="solid",tooltip=" "];
}
