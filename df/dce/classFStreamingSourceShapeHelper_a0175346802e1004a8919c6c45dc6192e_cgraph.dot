digraph "FStreamingSourceShapeHelper::ForEachShape"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="FStreamingSourceShapeHelper\l::ForEachShape",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="TArray::IsEmpty",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d52/classTArray.html#a2c57f7971567594e23017eb0b92eadfe",tooltip="Returns true if the array is empty and contains no elements."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="UE::Math::TRotator\l::IsNearlyZero",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dd7/structUE_1_1Math_1_1TRotator.html#ae36323bb8aa4b8858d05dd8cbdf18b7c",tooltip="Checks whether rotator is nearly zero within specified tolerance, when treated as an orientation."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="UE::Math::TRotator\l::NormalizeAxis",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dd7/structUE_1_1Math_1_1TRotator.html#a79c9fd8c1103296807d5f67985697cbc",tooltip="Clamps an angle to the range of (-180, 180]."];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="UE::Math::TRotator\l::ClampAxis",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dd7/structUE_1_1Math_1_1TRotator.html#a8d75ad89b69807d22c8b244147fdace0",tooltip="Clamps an angle to the range of [0, 360)."];
  Node3 -> Node6 [id="edge5_Node000003_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="VectorAbs",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#ab1e23c42a5e914b9b09f84afeb306f3e",tooltip="Returns the absolute value (component-wise)."];
  Node3 -> Node7 [id="edge6_Node000003_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="VectorAnyGreaterThan",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#a11dff42191a4215e5538bbb555224983",tooltip="Returns non-zero if any element in Vec1 is greater than the corresponding element in Vec2,..."];
  Node3 -> Node8 [id="edge7_Node000003_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="VectorLoadFloat1",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#a521f9236ca718421a1c6dc3325676dbe",tooltip="Loads 1 float from unaligned memory and replicates it to all 4 elements."];
  Node8 -> Node9 [id="edge8_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="MakeVectorRegisterFloat",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#aefc67d5a07d1692613a29d8c9f71e815",tooltip="Returns a bitwise equivalent vector based on 4 DWORDs."];
  Node1 -> Node10 [id="edge9_Node000001_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="FSphericalSector::IsValid",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d28/classFSphericalSector.html#a964f37e6a4f45b8f62431a04072aa69e",tooltip=" "];
  Node10 -> Node11 [id="edge10_Node000010_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="FSphericalSector::IsNearlyZero",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d28/classFSphericalSector.html#ab5631ff34ff365810af459f6c05237b4",tooltip=" "];
  Node11 -> Node12 [id="edge11_Node000011_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="FMath::IsNearlyZero",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/d20/structFMath.html#ac9075b119b641d69ef4475cc5c2a60a8",tooltip="Checks if a floating point number is nearly zero."];
  Node1 -> Node13 [id="edge12_Node000001_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="FSphericalSector::TransformBy",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d28/classFSphericalSector.html#ac3016b1616dd9bb21401fe9cd5b0c79b",tooltip="Get result of Transforming spherical sector with transform."];
  Node13 -> Node14 [id="edge13_Node000013_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="FSphericalSector::FSpherical\lSector",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d2/d28/classFSphericalSector.html#aa3cb01e0bde84ed49583150651ed74b6",tooltip="Creates and initializes a new spherical sector."];
  Node13 -> Node15 [id="edge14_Node000013_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="UE::Math::TTransform\l::GetMaximumAxisScale",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d9/db6/structUE_1_1Math_1_1TTransform.html#a20d7b761c6236e3e7777500e01826e84",tooltip="same version of TMatrix<T>::GetMaximumAxisScale function"];
  Node15 -> Node16 [id="edge15_Node000015_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="UE::Math::TTransform\l::DiagnosticCheckNaN\l_Scale3D",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d9/db6/structUE_1_1Math_1_1TTransform.html#abd2a49a54d40ab6008a8e91228a88fcc",tooltip=" "];
  Node13 -> Node17 [id="edge16_Node000013_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="UE::Math::TTransform\l::TransformPosition",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d9/db6/structUE_1_1Math_1_1TTransform.html#ac1c80ff00777c7e4ecc39b9d2eb4e5bf",tooltip=" "];
  Node17 -> Node18 [id="edge17_Node000017_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="UE::Math::TTransform\l::DiagnosticCheckNaN_All",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d9/db6/structUE_1_1Math_1_1TTransform.html#aa084e7b9cf8562aa93b41f704a6de991",tooltip=" "];
  Node13 -> Node19 [id="edge18_Node000013_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="UE::Math::TTransform\l::TransformVector",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d9/db6/structUE_1_1Math_1_1TTransform.html#adfe46a1a582851ccc8128f0b7da01278",tooltip=" "];
  Node19 -> Node18 [id="edge19_Node000019_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node20 [id="edge20_Node000001_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="UE::Math::TRotator\l::Vector",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/dd7/structUE_1_1Math_1_1TRotator.html#a1551a76a1ff9fc635fcceb5c93a94ef1",tooltip="Convert a rotation into a unit vector facing in its direction."];
}
