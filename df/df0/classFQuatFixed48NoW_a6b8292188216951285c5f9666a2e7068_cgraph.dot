digraph "FQuatFixed48NoW::FromQuat"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="FQuatFixed48NoW::FromQuat",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="UE::Math::TQuat::Normalize",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/d4a/structUE_1_1Math_1_1TQuat.html#a02b564d66c1c1b1df24426dbee01c4ee",tooltip="Normalize this quaternion if it is large enough."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="UE::Math::TQuat::Vector",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/d4a/structUE_1_1Math_1_1TQuat.html#aa19243ea9ed20bd1d0023248a1dfdf0e",tooltip="Convert a rotation into a unit vector facing in its direction."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="UE::Math::TQuat::GetAxisX",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/d4a/structUE_1_1Math_1_1TQuat.html#a957398e9f2ad9fd9b6590c74888498cc",tooltip="Get the forward direction (X axis) after it has been rotated by this Quaternion."];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="UE::Math::TQuat::RotateVector",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d6/d4a/structUE_1_1Math_1_1TQuat.html#ae2a77a1d3fcc813fdfc299c3c10eda84",tooltip="Rotate a vector by this quaternion."];
  Node5 -> Node6 [id="edge5_Node000005_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="UE::Math::TVector::\lCrossProduct",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$de/d77/structUE_1_1Math_1_1TVector.html#ac1f74b10c82cb7642c056c5f8d056036",tooltip="Calculate the cross product of two vectors."];
  Node6 -> Node7 [id="edge6_Node000006_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="UE::Math::TVector::\lTVector",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$de/d77/structUE_1_1Math_1_1TVector.html#a50071892cd411543cbbb3d9d35a6f277",tooltip="Default constructor (no initialization)."];
  Node2 -> Node8 [id="edge7_Node000002_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="VectorCompareGE",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#a9791076615abb89cb4362641d3cbe91f",tooltip="Creates a four-part mask based on component-wise >= compares of the input vectors."];
  Node8 -> Node9 [id="edge8_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="MakeVectorRegisterFloat",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#aefc67d5a07d1692613a29d8c9f71e815",tooltip="Returns a bitwise equivalent vector based on 4 DWORDs."];
  Node2 -> Node10 [id="edge9_Node000002_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="VectorDot4",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#a228a2afa492d30626e0459e5c88b9ae9",tooltip="Calculates the dot4 product of two vectors and returns a vector with the result in all 4 components."];
  Node10 -> Node9 [id="edge10_Node000010_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node11 [id="edge11_Node000002_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="VectorLoadAligned",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#a795bf143be99fa9c21053ce7ee7367ee",tooltip="Loads 4 FLOATs from aligned memory."];
  Node11 -> Node12 [id="edge12_Node000011_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="VectorLoad",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#acf012ed0bd0dbebc7aadab0ba8a1f808",tooltip="Loads 4 FLOATs from unaligned memory."];
  Node12 -> Node9 [id="edge13_Node000012_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node13 [id="edge14_Node000002_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="VectorLoadFloat1",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#a521f9236ca718421a1c6dc3325676dbe",tooltip="Loads 1 float from unaligned memory and replicates it to all 4 elements."];
  Node13 -> Node9 [id="edge15_Node000013_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node14 [id="edge16_Node000002_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="VectorMultiply",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#a498979d68d58aebba11252fe447acc0e",tooltip="Multiplies two vectors (component-wise) and returns the result."];
  Node2 -> Node15 [id="edge17_Node000002_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="VectorSelect",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#a80d0251c859b099e8d3bad3443cfc5ea",tooltip="Does a bitwise vector selection based on a mask (e.g., created from VectorCompareXX)"];
  Node15 -> Node9 [id="edge18_Node000015_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node16 [id="edge19_Node000002_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="VectorStoreAligned",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dd/d4d/UnrealMathFPU_8h.html#aac7505e05c44791186788055ed24e936",tooltip="Stores a vector to aligned memory."];
  Node16 -> Node17 [id="edge20_Node000016_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="FMemory::Memcpy",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$de/d4a/structFMemory.html#af5c0a2f1987809876d6d72269851e89c",tooltip=" "];
  Node17 -> Node18 [id="edge21_Node000017_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="FGenericPlatformMemory\l::Memcpy",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/dfd/structFGenericPlatformMemory.html#a13ca9511967a7af8d1c2c3beab1208e2",tooltip=" "];
}
